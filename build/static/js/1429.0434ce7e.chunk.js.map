{"version":3,"file":"static/js/1429.0434ce7e.chunk.js","mappings":"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","sources":["webpack://costing/./src/UI/cards/SearchCard.module.css?35f0","UI/cards/SearchCard.js","pages/ProductionPages/OrderSearch/DeliverySchedule/DeliveryForm.js","pages/ProductionPages/OrderSearch/DeliverySchedule/DeliveryTable.js","pages/ProductionPages/OrderSearch/DeliverySchedule/DeliverySchedule.js","pages/ProductionPages/OrderSearch/OrderEntry.js","pages/ProductionPages/OrderSearch/OrderTable.js","webpack://costing/./src/pages/ProductionPages/OrderSearch/orders.module.css?56e9","pages/ProductionPages/OrderSearch/MonthlyPlan/DeliveryTable.js","pages/ProductionPages/OrderSearch/MonthlyPlan/TargetSchedule.js","webpack://costing/./src/pages/ProductionPages/OrderSearch/MonthlyPlan/monthlyplan.module.css?e1df","pages/ProductionPages/OrderSearch/MonthlyPlan/MonthlyForm.js","pages/ProductionPages/OrderSearch/MonthlyPlan/MonthlyPlanTable.js","pages/ProductionPages/OrderSearch/MonthlyPlan/MonthlyPlan.js","webpack://costing/./src/pages/ProductionPages/OrderSearch/DailyPlan/dailyplan.module.css?f714","pages/ProductionPages/OrderSearch/DailyPlan/DaiilyPlanForm.js","pages/ProductionPages/OrderSearch/DailyPlan/DailyPlanTable.js","pages/ProductionPages/OrderSearch/DailyPlan/DailyPlan.js","webpack://costing/./src/pages/ProductionPages/OrderSearch/JobOrderRequest/joborder.module.css?0653","pages/ProductionPages/OrderSearch/JobOrderRequest/JobOrderForm.js","pages/ProductionPages/OrderSearch/JobOrderRequest/JobOrderTable.js","pages/ProductionPages/OrderSearch/JobOrderRequest/ReceivalForm.js","pages/ProductionPages/OrderSearch/JobOrderRequest/InspectionForm.js","pages/ProductionPages/OrderSearch/JobOrderRequest/JobOrder.js","webpack://costing/./src/pages/ProductionPages/OrderSearch/Dispatch/dispatch.module.css?5c4e","pages/ProductionPages/OrderSearch/Dispatch/DispatchForm.js","pages/ProductionPages/OrderSearch/Dispatch/DispatchTable.js","pages/ProductionPages/OrderSearch/Dispatch/Dispatch.js","pages/ProductionPages/OrderSearch/ProductionApproval/RevisionForm.js","pages/ProductionPages/OrderSearch/ProductionApproval/ProductionApp.js","NewComponent/dataUtils.js","pages/ProductionPages/OrderSearch/OrderSearch.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"SearchCard_card__Dzf+K\",\"cardHeader\":\"SearchCard_cardHeader__QVtAN\",\"cardBody\":\"SearchCard_cardBody__Yd43+\",\"addButton\":\"SearchCard_addButton__iMTZ7\",\"icon\":\"SearchCard_icon__HgcvT\",\"container\":\"SearchCard_container__kjEtf\",\"heading\":\"SearchCard_heading__yWDof\",\"botton\":\"SearchCard_botton__UWqIi\",\"monthlyform\":\"SearchCard_monthlyform__Pvi+3\",\"title\":\"SearchCard_title__L9Ix5\",\"shRow\":\"SearchCard_shRow__0H9j4\",\"shCol\":\"SearchCard_shCol__5e-AT\",\"tableCon\":\"SearchCard_tableCon__W6ioV\",\"formCon\":\"SearchCard_formCon__A+Zsm\",\"btn\":\"SearchCard_btn__dv+Rc\",\"buttCon\":\"SearchCard_buttCon__l2vlz\",\"modal\":\"SearchCard_modal__Y+UBN\"};","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {\n    Button,\n    Row,\n    Col,\n    Card\n    // FormControl\n  } from 'react-bootstrap';\nimport classes from './SearchCard.module.css'\nimport * as FaIcons from 'react-icons/fa';\n\nfunction SearchCard(props, styles) {\n  const dynamicStyles = typeof props.styles === \"undefined\" ? {} : props.styles;\n  return (\n    <Card\n      className={classes.card}\n      style={{\n        ...dynamicStyles.search,\n        ...(dynamicStyles.search ? {} : { background: \"transparent\" }),\n      }}\n    >\n    <Card.Header className={classes.cardHeader}>\n    <Row >\n    <Col xs={12} md={!props.bottonShow ? { span: 5, offset: 3 } : { span: 12 }} className='d-flex justify-content-center'><h4>{props.title}</h4></Col>\n        <Col xs={12} md={4} className='d-flex justify-content-end'>\n            {!props.bottonShow && <Button variant=\"primary\" className={classes.addButton} onClick={props.onHeaderClick}>\n              {props.buttonName}</Button>}\n        </Col>\n      </Row>\n   </Card.Header>\n    <Card.Body className={classes.cardBody}>\n        {props.children}\n    </Card.Body>\n  </Card>\n  )\n}\n\nexport default SearchCard\n","import React,{useState,useEffect} from \"react\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {\n  Container,\n  Form,\n  Button,\n  Row,\n  Col\n  // InputGroup,\n  // FormControl\n} from \"react-bootstrap\";\nimport { useForm } from \"react-hook-form\";\nimport classes from '../../../../Components/Forms/CreateForm.module.css'\nimport {FcPlus} from 'react-icons/fc'\nimport Ctheme from \"../../../../Components/Ctheme/Ctheme\";\n\nfunction DeliveryForm(props) {\n\n    const [defValues,setDefValues] = useState();\n    const [deliveries,setDeliveries]=useState(props.deliveries)\n    let { register, handleSubmit, formState:{errors}, watch, setError, clearErrors ,setValue,reset} = useForm( {defaultValues: {...defValues}});\n    const addDeliveries = (values)=>{\n        props.saveDeliveries(values);\n        reset()\n    }\n\n    useEffect(() => {\n      reset(props.defaultValues)\n    }, [props.defaultValues])\n  return (\n    <Form className={classes.formcon}>\n   <Row style={{backgroundColor: Ctheme.colors.dgc,borderRadius:\"1em\", padding:Ctheme.paddings.pdc,}}>\n       <Col>\n       <Form.Group key=\"lineNo\">\n                            <Form.Label htmlFor=\"lineNo\">Line No</Form.Label>\n                            <Form.Control type=\"text\" id=\"lineNo\" name=\"lineNo\"\n                            {...register(\"lineNo\",{ required: \"Line No is Required\" })} className={classes.formBorder}/>\n                            {errors[\"lineNo\"] && ((\n                        <Form.Text className=\"text-danger\">\n                        {errors[\"lineNo\"]['message']}\n                        </Form.Text>\n                     ))}\n                        </Form.Group>\n       </Col>\n       <Col>\n       <Form.Group key=\"quantity\">\n                            <Form.Label htmlFor=\"quantity\">Quantity</Form.Label>\n                            <Form.Control type=\"number\" id=\"quantity\" name=\"quantity\"\n                            {...register(\"quantity\",{ required: \"Quantity is Required\" })}\n                            min={1} step={1} max={props.maxQty} className={classes.formBorder}/>\n                            {errors[\"quantity\"] && ((\n                        <Form.Text className=\"text-danger\" >\n                        {errors[\"quantity\"]['message']}\n                        </Form.Text>\n                     ))}\n                        </Form.Group>\n       </Col>\n       <Col >\n       <Form.Group key=\"deliveryDate\">\n                                <Form.Label htmlFor=\"deliveryDate\">Delivery Date</Form.Label>\n                                <Form.Control type=\"date\" id=\"deliveryDate\" name=\"deliveryDate\"  \n                                {...register(\"deliveryDate\",{ required: \"Enter Delivery Date\" })} className={classes.formBorder}/>\n                                {errors[\"deliveryDate\"] && ((\n                            <Form.Text className=\"text-danger\">\n                            {errors[\"deliveryDate\"]['message']}\n                            </Form.Text>\n                         ))}\n                            </Form.Group>\n                            <Form.Control type=\"hidden\" id=\"orderId\" name=\"orderId\"\n                             {...register(\"orderId\") }  value={props.orderId ? props.orderId : \"\" }\n                            />\n\n                          <Form.Control type=\"hidden\" id=\"deliveryId\" name=\"deliveryId\"\n                             {...register(\"deliveryId\") }  value={props.delivery ? props.delivery.deliveryId : \"\" }\n                            />\n       </Col>\n       <Col className=\"d-flex align-items-center justify-content-center\"> <a><FcPlus size={38} className={classes.btnextra} onClick={handleSubmit(addDeliveries)} hover/></a></Col>\n   </Row></Form>\n  )\n}\n\nexport default DeliveryForm\n","import React from 'react';\nimport {FiEdit,FiTrash2} from 'react-icons/fi'\nimport {BiRevision} from 'react-icons/bi'\nimport {FcApproval} from 'react-icons/fc'\n\n\n// This is the table constant/settings which needed to render table elements\n\nexport const DeliveryTable = (handleEdit,actions,selectedColumns) => {\n  \n  return [\n    {\n      title: 'Line No',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.lineNo}</span>;\n      \n      },\n    },\n    {\n      title: 'Quantity',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.quantity}</span>;\n      },\n    },\n    {\n      title: 'Delivery Date',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.deliveryDate}</span>;\n      },\n    }, {\n      title: 'Revised Date',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.revisedDate}</span>;\n      },\n    },\n    {\n        title: 'Remove',\n        align:'center',\n        render: rowData => {\n          return <FiTrash2 style={{cursor:\"pointer\"}} onClick={handleEdit(rowData)}></FiTrash2>\n        },\n      },{\n        title: 'Revise Date',\n        align:'center',\n        render: rowData => {\n          return <BiRevision style={{cursor:\"pointer\"}} onClick={handleEdit(rowData,actions[0])}></BiRevision>\n        },\n      },{\n        title: 'Accept',\n        align:'center',\n        render: rowData => {\n          return <FcApproval style={{cursor:\"pointer\"}} onClick={handleEdit(rowData,actions[1])}></FcApproval>\n        },\n      }\n  ].filter(function (eachElem, index) {\n    return selectedColumns.indexOf(index) == -1\n})\n};\n\nexport default DeliveryTable ;","import React,{useEffect, useState} from 'react'\nimport DeliveryForm from './DeliveryForm'\nimport Table from '../../../../Components/tables/Table'\nimport {deliveryData} from './DeliveryData'\nimport DeliveryTable from './DeliveryTable'\nimport Ctheme from '../../../../Components/Ctheme/Ctheme'\n\nconst styles = {\n  \n  \n  tablehead: {\n    margin: '.2rem .0rem',\n    padding: '0',\n  },\n};\n\nfunction DeliverySchedule(props) {\n  const dataintial = props.data ? props.data : []\n  const [deliveries,setDeliveries] =useState(dataintial)\n  const [defValues,setDefValues] =useState({})\n  const [maxQty,setMaxQty]=useState(deliveries.length>0 ? props.maxQty-deliveries.map(item => item.quantity).reduce((prev, next) => prev + next) : props.maxQty);\n\n  //useEffect(()=>{saveDeliveries()},[])\n  const saveDeliveries=(values)=>{\n    setMaxQty(maxQty-values.quantity)\n      values.revisedDate=values.deliveryDate\n    // setDeliveries(oldDeli=>[...oldDeli,values])\n    // setDeliveries((state) => {\n    //   console.log({...state})\n    //   return state\n    // });\n    props.onDeliveryUpdate(values,\"add\")\n     \n    \n  //  {deliveries ? setDeliveries([...deliveries,values])};\n  }\n  const handleEdit=(values)=>()=>{\n   // console.log({...item})\n   // setDefValues(item)\n  //   setDeliveries(deliveries.filter(function( obj ) {\n  //     return obj.lineNo !== values.lineNo;\n  // }))\n  setMaxQty(maxQty+values.quantity)\n  props.onDeliveryUpdate(values,\"deleted\")\n\n  }\n\n\n  return (\n   <div style={{padding: Ctheme.paddings.pdc}}>\n   <DeliveryForm saveDeliveries={saveDeliveries} defaultValues={defValues} maxQty = {maxQty}></DeliveryForm>\n   <Table data={props.data} cols={DeliveryTable(handleEdit,\"\",[6,5])}  styles={styles}></Table>\n   </div>\n  )\n}\n\nexport default DeliverySchedule\n","\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport CreateForm from \"../../../Components/Forms/CreateForm\";\nimport DeliverySchedule from \"./DeliverySchedule/DeliverySchedule\";\nimport api from \"../../../Api\";\nimport useFetch, { Provider } from \"use-http\";\nimport { borderRadius } from \"@mui/system\";\nimport Ctheme from \"../../../Components/Ctheme/Ctheme\";\n\nconst styles = {\n  upper: {\n    \n    padding: \"0\", \n    \n  },\n  upperRow: {\n    margin: Ctheme.margins.mg,\n    padding: Ctheme.paddings.pd,\n    backgroundColor: Ctheme.colors.dg,\n    borderRadius:'1rem'\n  },\n  uppertitle: {\n    borderBottomLeftRadius: 0,\n    borderBottomRightRadius: '0',\n    backgroundColor:Ctheme.colors.ttle,\n  },\n};\n\nconst rowWiseFields = 3;\n\nfunction OrderEntry(props) {\n  const { get, post, response, loading, error } = useFetch({ data: [] });\n\n  const [defaultValues,setDefaultValues] = useState(props.selectedItem ? props.selectedItem : {})\n\n  // if(defaultValues.orderId>0){\n  //     setDefaultValues\n  // }\n\n  let [deliveries, setDeliveries] = useState(props.selectedItem.deliveries\n    ? props.selectedItem.deliveries\n    : []);\n\n  const [maxQty,setMaxQty] = useState(props.selectedItem ? props.selectedItem.quantity : 1);\n\n  const addDeliveriesHandler = (values,action) => {\n    if(action===\"add\"){\n      setDeliveries(oldDeli=>[...oldDeli,values])\n    }else{\n      console.log({...values})\n      setDeliveries(deliveries.filter(function( obj ) {\n             return obj.lineNo !== values.lineNo;\n         }))\n    }\n  };\n\n  const [prods, setProds] = useState([{ value: \"\", label: \"Select\" }]);\n  const [custs,setCusts] = useState([{value:\"\",label:\"Select\"}]);\n\n  const loadInitialOptions1 = useCallback(async () => {\n    // const { ok } = response // BAD, DO NOT DO THIS\n   // const loadedprods = await get(api + \"/product/loadOptions\");\n    const loadedprods = await get(api + \"/customer/loadOptions\");\n   // setProds([...prods, ...loadedprods]);\n   setCusts([...custs,...loadedprods])\n    // console.log({...props.selectedItem})\n  }, [get, response]);\n\n  const loadProducts = useCallback(async(customerId)=>{\n    const loadedprods = await post(api + \"/product/loadProductsByCustomer\" , {\"id\":customerId});\n   // setProds([...prods, ...loadedprods]);\n   setProds([...prods,...loadedprods])\n  }, [post, response]);\n\n  useEffect(() => {\n    loadInitialOptions1();\n  }, []); // componentDidMount\n\n  function onSubmit(values) {\n    values.deliveries = deliveries;\n    props.saveFunction(values);\n    console.log(values);\n    //props.saveFunction(values);\n  }\n\n  const template = {\n    heading: \"Order Entry\",\n    fields: [\n      {\n        title: \"Order Number\",\n        type: \"text\",\n        name: \"orderNo\",\n        contains: \"text\",\n        inpprops: {\n          minlength: 3,\n          maxlength: 80,\n        },\n      },{\n        title: \"Customer Name\",\n        type: \"select\",\n        name: \"customerId\",\n        contains: \"Select\",\n        options: custs,\n        validationProps: \"Product Name is required\",\n      },\n      {\n        title: \"Product Name\",\n        type: \"select\",\n        name: \"productId\",\n        contains: \"Select\",\n        options: prods,\n        validationProps: \"Product Name is required\",\n      },\n      {\n        title: \"Quantity\",\n        type: \"number\",\n        name: \"quantity\",\n        contains: \"number\",\n        validationProps: \"Internal Part No is required\",\n        inpprops: {\n          min: 1,\n          step: 1,\n        },\n      },\n      {\n        title: \"Order Date\",\n        type: \"date\",\n        name: \"OrderDate\",\n        contains: \"date\",\n        validationProps: \"Internal Part No is required\",\n        inpprops: {\n          format: \"dd/mm/yyyy\",\n        },\n      },\n      {\n        title: \"Target Date\",\n        type: \"date\",\n        name: \"TargetDate\",\n        contains: \"date\",\n        validationProps: \"Internal Part No is required\",\n        inpprops: {\n          format: \"dd/mm/yyyy\",\n        },\n      },\n    ],\n  };\n  function validate(watchValues, errorMethods) {\n    let { errors, setError, clearErrors } = errorMethods;\n  \n    // Firstname validation\n    if (watchValues[0] > 0) {\n        console.log(watchValues[0]);\n        setMaxQty(watchValues[0]);\n      }else if(watchValues[1] != \"\"){\n          loadProducts(watchValues[1]);\n      }\n  }\n  return (\n    <CreateForm\n      template={template}\n      rowwise={rowWiseFields}\n      watchFields={[\"quantity\",\"customerId\"]}\n      validate={validate}\n      onSubmit={onSubmit}\n      onCancel={props.onCancel}\n      buttonName=\"Submit\"\n      defaultValues={props.selectedItem}\n      styles={styles}\n      btButtons={<DeliverySchedule\n        data={deliveries}\n        onDeliveryUpdate={addDeliveriesHandler}\n        maxQty = {maxQty}\n      />}\n    ></CreateForm>\n  );\n}\n\nexport default OrderEntry;\n\n\n","import React from 'react';\nimport * as BsIcons from 'react-icons/bs'\nimport * as FaIcons from 'react-icons/fa'\nimport {AiOutlinePullRequest,AiOutlineReconciliation} from 'react-icons/ai'\nimport {FaDailymotion} from 'react-icons/fa'\n// This is the table constant/settings which needed to render table elements\n\nexport const OrderTable = (showFormHandler,actions) => {\n  return [\n    {\n      title: 'Customer Name',\n      align:'left',\n      render: rowData => {\n        return <span>{rowData.product.customer.name}</span>;\n      },\n    },{\n      title: 'Product Name',\n      align:'left',\n      render: rowData => {\n        return <span>{rowData.product.productName}</span>;\n      \n      },\n    },\n    {\n      title: 'Order No',\n      align:'left',\n      render: rowData => {\n        return (\n        <>\n        <span>{rowData.orderNo}</span></>\n        )\n      },\n    },\n    \n    {\n      title: ' Part No.',\n      align:'left',\n      render: rowData => {\n        return <span>{rowData.product.internalPartCode}</span>;\n      },\n    },\n    {\n      title: 'Qty',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.quantity}</span>;\n      },\n    },{\n      title: 'Status',\n      align:'left',\n      render: rowData => {\n        return (\n        <>{[\"Awaiting_Approval\"].includes(`${rowData.orderStatus}`) ? \n        <span style={{cursor:\"pointer\",color:\"blue\"}} onClick={showFormHandler(rowData,actions[6])}>{rowData.orderStatus}</span> :\n        <span style={{color:\"gray\"}} >{rowData.orderStatus}</span>\n        }</>\n         )},\n    },\n    {\n      title: 'Edit',\n      align:'center',\n      render: rowData => {\n        return <FaIcons.FaEdit style={{cursor:\"pointer\"}} onClick={showFormHandler(rowData,actions[0])}></FaIcons.FaEdit>\n      },\n    },\n    {\n      title: 'M.Plan',\n      align:'center',\n      render: rowData => {\n        return <BsIcons.BsCalendar2Month style={{cursor:\"pointer\"}} onClick={showFormHandler(rowData,actions[1])}></BsIcons.BsCalendar2Month>\n      },\n    },\n    {\n        title: 'J.O',\n        align:'center',\n        render: rowData => {\n          return <AiOutlinePullRequest style={{cursor:\"pointer\"}} onClick={showFormHandler(rowData,actions[3])}></AiOutlinePullRequest>\n        },\n      },{\n        title: 'Dispatch',\n        align:'center',\n        render: rowData => {\n          return <FaDailymotion style={{cursor:\"pointer\"}} onClick={showFormHandler(rowData,actions[5])}></FaDailymotion>\n        },\n      },\n      {\n        title: 'Process',\n        align:'center',\n        render: rowData => {\n          return <FaIcons.FaProductHunt style={{cursor:\"pointer\"}} onClick={showFormHandler(rowData,actions[4])}></FaIcons.FaProductHunt>\n        },\n      }\n  ];\n};\n\n\nexport default OrderTable","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"orders_container__iSRHN\"};","import React from 'react';\nimport * as BsIcons from 'react-icons/bs'\nimport * as FaIcons from 'react-icons/fa'\nimport {AiOutlinePullRequest,AiOutlineReconciliation} from 'react-icons/ai'\n\n// This is the table constant/settings which needed to render table elements\nexport const OrderTable = (handleEdit,showMonthlyFormHandler,showDailyFormHandler,showJOFormHandler,showProViewFormHandler,showDispatchFormHandler) => {\n  return [\n    {\n      title: 'Delivery Date',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.revisedDate}</span>;\n      \n      },\n    },\n    {\n      title: 'Quantity',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.quantity}</span>;\n      },\n    }\n  ];\n};\n\n\nexport default OrderTable","import React from 'react'\nimport Card from 'react-bootstrap/Card';\nimport {data }from './DeliveryData'\nimport DeliveryTable from './DeliveryTable'\nimport Table from '../../../../Components/tables/Table';\n\nfunction TargetSchedule(props) {\n  return (\n    <Table cols={DeliveryTable(()=>{})} data={props.data} striped/>\n  )\n}\n\nexport default TargetSchedule\n","// extracted by mini-css-extract-plugin\nexport default {\"monthlyform\":\"monthlyplan_monthlyform__HDCPD\",\"ctitle\":\"monthlyplan_ctitle__CSLaJ\",\"title\":\"monthlyplan_title__ggg+U\",\"shRow\":\"monthlyplan_shRow__ZexTn\",\"shCol\":\"monthlyplan_shCol__jwgzr\",\"table\":\"monthlyplan_table__BjCRq\"};","import React, { useEffect, useState } from 'react'\nimport CreateForm from '../../../../Components/Forms/CreateForm';\nimport classes from './monthlyplan.module.css'\n\nconst rowWiseFields = 2;\n\nfunction MonthlyForm(props) {\n    const template = {\n        fields: [\n             {\n                 title: 'Select Month',\n                 type: 'date',\n                 name: 'startDate',\n                 contains:\"date\",\n                 validation:\"Month and Year is Required\",\n                 inpprops:{\n                   format:\"dd/mm/yyyy\"\n                 },              \n   \n           },\n           {\n             title: 'Quantity',\n             type: 'number',\n             name: 'quantity',\n             contains:\"number\",\n             validation:\"Quantity is Required\",\n             inpprops:{\n                 min:1,\n                 step:1,\n             },            \n   \n       },\n       {\n           title: 'Remarks',\n           type: 'textarea',\n           name: 'remarks',\n           contains:\"textarea\",\n           inpprops:{\n             maxlength:128,\n             md:12\n           } \n     },{\n        type: 'hidden',\n        name: 'orderId',\n        contains:\"number\",\n        value:props.orderId,\n\n  },{\n        type: 'hidden',\n        name: 'monthPlanId',\n        contains:\"number\"  \n  }\n           ]\n       }\n       const [selected,setSelected]=useState()\n       useEffect(()=>{\n        setSelected(props.selected)\n       },[props.selected])\n      \n      function onSubmit(values) {\n        console.log({...values});\n        props.saveFunction(values);\n         }\n  return (\n     <CreateForm  template={template} className={classes.monthlyform}\n    rowwise={rowWiseFields}\n     validate={validate}\n     onSubmit={onSubmit} \n     onCancel={props.onCancel}\n     buttonName=\"Save\"\n     defaultValues={selected}>\n     </CreateForm>\n   \n   )\n}\n\nexport default MonthlyForm\n\n  \n  function validate(watchValues, errorMethods) {\n    let { errors, setError, clearErrors } = errorMethods;\n  \n    // Firstname validation\n    if(watchValues['firstname'] === 'Admin'){\n        if(!errors['firstname']){\n            setError('firstname', {\n                type: 'manual',\n                message: 'You cannot use this first name'\n            })\n        }\n    }else{\n        if(errors['firstname'] && errors['firstname']['type'] === 'manual'){\n            clearErrors('firstname');\n        }\n    }\n  }\n  \n    ","import React from 'react';\nimport * as BsIcons from 'react-icons/bs'\nimport {FiEdit} from 'react-icons/fi'\nimport {AiOutlinePullRequest,AiOutlineReconciliation} from 'react-icons/ai'\n\n// This is the table constant/settings which needed to render table elements\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n];\nexport const MonthlyPlanTable = (showFormHandler,exportTill) => {\n  return [\n    {\n      title: 'Month',\n      align:'center',\n      render: rowData => {\n        const date= new Date(rowData.startDate)\n        return <span>{monthNames[date.getMonth()]}</span>;\n      \n      },\n    },\n    {\n        title: 'Year',\n        align:'center',\n        render: rowData => {\n          const date= new Date(rowData.startDate)\n          return <span>{date.getFullYear()}</span>;\n        },\n      },\n    {\n      title: 'Quantity',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.quantity}</span>;\n      },\n    },\n    {\n        title: 'Remarks',\n        align:'left',\n        render: rowData => {\n          return <span>{rowData.remarks}</span>;\n        },\n      },\n      {\n      title: 'Edit',\n      align:'center',\n      render: rowData => {\n        return <FiEdit style={{cursor:\"pointer\"}} onClick={showFormHandler(rowData,\"edit\")}></FiEdit>\n      },\n    }\n  ].slice(0,exportTill);\n};","import React, { useState, useCallback, useEffect } from \"react\";\nimport CreateForm from \"../../../../Components/Forms/CreateForm\";\nimport SimpleCard from \"../../../../UI/cards/SimpleCard\";\nimport Card from \"react-bootstrap/Card\";\nimport TargetSchedule from \"./TargetSchedule\";\nimport { Row, Col } from \"react-bootstrap\";\nimport MonthlyForm from \"./MonthlyForm\";\nimport Table from \"../../../../Components/tables/Table\";\nimport { MonthlyPlanTable } from \"./MonthlyPlanTable\";\nimport classes from \"./monthlyplan.module.css\";\nimport useFetch, { Provider } from \"use-http\";\nimport api from \"../../../../Api\";\nimport { alertActions } from \"../../../../store/alert-slice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Ctheme from \"../../../../Components/Ctheme/Ctheme\";\n\n\nconst stylesUpper = {\n  margin: \"0\",\n  padding: \"0\",\n\n};\n\nconst stylesUpperTwo = {\n  margin: Ctheme.margins.mg,\n  \n  /*backgroundColor:'yellow' */\n};\n\nconst styles = {\n  simplettl: {\n    display: 'flex',\n    justifyContent: 'center',\n    backgroundColor: Ctheme.colors.simcard,\n    borderBottomLeftRadius: '0px', \n    borderBottomRightRadius: '0px', \n    backgroundColor:Ctheme.colors.ttle,\n    height: '3rem',\n  },\n};\n\n\n\n\nconst rowWiseFields = 2;\nfunction MonthlyPlan(props) {\n  const [monthlyPlans, setMonthlyPlans] = useState([]);\n  let [selectedPlan, setSelectedPlan] = useState();\n  var [maxQty,setMaxQty] = useState(props.selectedItem.quantity)\n  \n const [showAlert, alertMessage, alertVariant] = useSelector((state) => [\n    state.alertProps.showAlert,\n    state.alertProps.alertMessage,\n    state.alertProps.alertVariant,\n  ]);\n  const dispatch = useDispatch();\n  const { get, post, response, loading, error } = useFetch({ data: [] });\n  const loadInitialData = useCallback(async () => {\n    // const { ok } = response // BAD, DO NOT DO THIS\n    const initialPlans = await post(api + \"/monthlyPlan/plans\", {\n      id: props.selectedItem.orderId,\n      loadState: props.loadState,\n    });\n    if (response.ok) setMonthlyPlans(initialPlans);\n    {initialPlans.length >0 && setMaxQty(maxQty - initialPlans.map(item=>item.quantity).reduce((prev,next)=>(prev+next)))}\n    //  console.log(initialCusts)\n  }, [post, response, props.loadState]);\n\n  \n\n  useEffect(() => {\n    loadInitialData();\n  }, []); // componentDidMount\n\n  const saveDetails = async (monthlyPlan) => {\n    //  procMaps\n    let monthlyapi = monthlyPlan.monthPlanId\n      ? \"/monthlyPlan/update\"\n      : \"/monthlyPlan/create\";\n    console.log(monthlyapi);\n    const returnObject = await post(api + monthlyapi, monthlyPlan);\n    if (returnObject.retValues.status == 1) {\n      setSelectedPlan((selectedPlan) => {});\n      console.log({ ...selectedPlan });\n      if (monthlyPlan.monthPlanId) {\n        setMonthlyPlans(\n          monthlyPlans.map((mplan) =>\n            mplan.monthPlanId === returnObject.retValues.monthlyPlan.monthPlanId\n              ? returnObject.retValues.monthlyPlan\n              : mplan\n          )\n        );\n        AlertHandler(returnObject.retValues.message, \"success\");\n        props.loadStateContoller({ type: \"monthlyPlan\" });\n        setMaxQty(maxQty-returnObject.retValues.monthlyPlan.quantity)\n      } else if (returnObject.retValues.monthlyPlan.monthPlanId > 0) {\n        setMonthlyPlans([...monthlyPlans, returnObject.retValues.monthlyPlan]);\n        AlertHandler(returnObject.retValues.message, \"success\");\n        props.loadStateContoller({ type: \"monthlyPlan\" });\n        setMaxQty(maxQty-returnObject.retValues.monthlyPlan.quantity)\n      }\n    } else {\n      AlertHandler(returnObject.retValues.message, \"danger\");\n    }\n  };\n\n  const showFormHandler = (item, action) => () => {\n    if (action === \"edit\") {\n      setSelectedPlan(item);\n      console.log({...selectedPlan});\n    }\n  };\n\n  const AlertHandler = (alertContent, alertType) => {\n    dispatch(\n      alertActions.showAlertHandler({\n        showAlert: !showAlert,\n        alertMessage: alertContent,\n        alertVariant: alertType,\n      })\n    );\n  };\n  // const template = {\n  //   fields: [\n  //     {\n  //       title: \"Start Date\",\n  //       type: \"date\",\n  //       name: \"startDate\",\n  //       contains: \"date\",\n  //       validation: \"Month and Year is Required\",\n  //       inpprops: {\n  //         format: \"dd/mm/yyyy\",\n  //       },\n  //     },\n  //     {\n  //       title: \"Quantity\",\n  //       type: \"number\",\n  //       name: \"quantity\",\n  //       contains: \"number\",\n  //       validation: \"Quantity is Required\",\n  //       inpprops: {\n  //         min: 1,\n  //         step: 1         \n  //       },\n  //     },\n  //     {\n  //       title: \"Remarks\",\n  //       type: \"textarea\",\n  //       name: \"remarks\",\n  //       contains: \"textarea\",\n  //       inpprops: {\n  //         maxlength: 128,\n  //         md: 12,\n  //       },\n  //     },\n  //     {\n  //       type: \"hidden\",\n  //       name: \"orderId\",\n  //       contains: \"number\",\n  //       value: props.selectedItem.orderId,\n  //     },\n  //     {\n  //       type: \"hidden\",\n  //       name: \"monthPlanId\",\n  //       contains: \"number\",\n  //     },\n  //   ],\n  // };\n\n  return (\n    <SimpleCard upper={stylesUpper} useUpperTwoStyle={false} >\n      <div className={classes.ctitle}>\n        <h5 className={classes.title}>\n          Monthly Plan - {props.selectedItem.product.productName}({props.selectedItem.product.customer.name})\n        </h5>{\" \"}\n      </div>\n      <Row className={classes.shRow}>\n        <Col md={6} className={classes.shCol}>\n        <SimpleCard uppertwo={stylesUpperTwo} useUpperTwoStyle={true} title=\"Target Schedule\"\n        \n       \n        styles={styles}\n      >\n            <TargetSchedule\n              data={props.selectedItem.deliveries}\n            ></TargetSchedule>\n          </SimpleCard>\n        </Col>\n        <Col className={classes.shCol}>\n          \n         <MonthlyForm\n            selected={selectedPlan}\n            saveFunction={saveDetails}\n            onCancel={props.onCancel}\n            orderId={props.selectedItem.orderId}\n          ></MonthlyForm> \n        </Col>\n      </Row>\n      <Row className={classes.table}> \n\n        <Table \n          data={monthlyPlans}\n          cols={MonthlyPlanTable(showFormHandler)}\n        ></Table> \n      </Row>\n    </SimpleCard>\n  );\n}\nexport default MonthlyPlan;\n","// extracted by mini-css-extract-plugin\nexport default {\"monthlyform\":\"dailyplan_monthlyform__PMigj\",\"title\":\"dailyplan_title__4PDcR\",\"shRow\":\"dailyplan_shRow__zM7ne\",\"shCol\":\"dailyplan_shCol__bQ79r\",\"tableCon\":\"dailyplan_tableCon__8uPyX\"};","import React from 'react'\nimport CreateForm from '../../../../Components/Forms/CreateForm'\n\nconst rowWiseFields=2\nfunction DaiilyPlanForm(props) {\n\n\n\n\n    const template = {\n        fields: [\n             {\n                 title: 'Date',\n                 type: 'date',\n                 name: 'planDate',\n                 contains:\"date\",\n                 validation:\"Date is Required\",\n                 inpprops:{\n                   format:\"dd/mm/yyyy\"\n                 },\n          },\n           {\n             title: 'Quantity',\n             type: 'number',\n             name: 'quantity',\n             contains:\"number\",\n             validation:\"Quantity is Required\",\n             inpprops:{\n                 min:1,\n                 step:1,\n                 max : props.maxQty\n             },\n        },\n       {\n           title: 'Remarks',\n           type: 'textarea',\n           name: 'remarksForProd',\n           contains:\"textarea\",\n           inpprops:{\n             maxlength:128,\n             md:6\n           },\n     },{\n        type: 'hidden',\n        name: 'orderId',\n        contains:\"number\",\n        value:props.orderId,\n\n  },{\n        type: 'hidden',\n        name: 'dailyPlanId',\n        contains:\"number\"  \n  }\n           ]\n       }\n\n       function onSubmit(values) {\n        console.log({...values});\n        props.saveFunction(values);\n        }\n      \n  return (\n     <CreateForm  template={template} \n    rowwise={rowWiseFields}\n     validate={validate}\n     onSubmit={onSubmit} \n     onCancel={props.onCancel}\n     buttonName=\"Save\"\n     defaultValues={props.selected}>\n     </CreateForm>\n   \n   )\n}\n\nexport default DaiilyPlanForm\nfunction onSubmit(values) {\n    console.log(values);\n  }\n  \n  function validate(watchValues, errorMethods) {\n    let { errors, setError, clearErrors } = errorMethods;\n  \n    // Firstname validation\n    if(watchValues['firstname'] === 'Admin'){\n        if(!errors['firstname']){\n            setError('firstname', {\n                type: 'manual',\n                message: 'You cannot use this first name'\n            })\n        }\n    }else{\n        if(errors['firstname'] && errors['firstname']['type'] === 'manual'){\n            clearErrors('firstname');\n        }\n    }\n  }\n  ","import React from 'react';\nimport * as BsIcons from 'react-icons/bs'\nimport {FiEdit} from 'react-icons/fi'\nimport {AiOutlinePullRequest,AiOutlineReconciliation} from 'react-icons/ai'\n\n// This is the table constant/settings which needed to render table elements\nexport const DailyPlanTable = (handleEdit,exportTill) => {\n  return [\n    {\n        title: 'Date',\n        align:'center',\n        render: rowData => {\n          return <span>{rowData.planDate}</span>;\n        \n        },\n      },\n    {\n      title: 'Quantity',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.quantity}</span>;\n      },\n    },\n    {\n        title: 'Remarks',\n        align:'left',\n        render: rowData => {\n          return <span>{rowData.remarksForProd}</span>;\n        },\n      },\n      {\n      title: 'Edit',\n      align:'center',\n      render: rowData => {\n        return <FiEdit style={{cursor:\"pointer\"}} onClick={handleEdit(rowData)}></FiEdit>\n      },\n    }\n  ].slice(0,exportTill);\n};","import React, { useState, useCallback, useEffect } from \"react\";\nimport SimpleCard from \"../../../../UI/cards/SimpleCard\";\nimport Card from \"react-bootstrap/Card\";\nimport { Row, Col } from \"react-bootstrap\";\nimport Table from \"../../../../Components/tables/Table\";\nimport classes from \"./dailyplan.module.css\";\nimport DaiilyPlanForm from \"./DaiilyPlanForm\";\nimport { DailyPlanTable } from \"./DailyPlanTable\";\nimport { daiData } from \"./DailyData\";\nimport useFetch, { Provider } from \"use-http\";\nimport api from \"../../../../Api\";\nimport { alertActions } from \"../../../../store/alert-slice\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction DailyPlan(props) {\n  const handleEdit = (item) => () => {\n    setSelectedPlan({ ...item });\n    // alert(JSON.stringify(item))\n  };\n  const [showAlert, alertMessage, alertVariant] = useSelector((state) => [\n    state.alertProps.showAlert,\n    state.alertProps.alertMessage,\n    state.alertProps.alertVariant,\n  ]);\n  const dispatch = useDispatch();\n  const { get, post, response, loading, error } = useFetch({ data: [] });\n  const [dailyPlans, setDailyPlans] = useState([]);\n  var [maxQty,setMaxQty] = useState(props.selectedItem.quantity)\n  \n  let [selectedPlan, setSelectedPlan] = useState({});\n  const loadInitialData = useCallback(async () => {\n    // const { ok } = response // BAD, DO NOT DO THIS\n    const initialPlans = await post(api + \"/dailyPlan/plans\", {\n      id: props.selectedItem.orderId,\"loadState\":props.loadState\n    });\n    if (response.ok) setDailyPlans(initialPlans)\n    {initialPlans.length >0 && setMaxQty(maxQty - initialPlans.map(item=>item.quantity).reduce((prev,next)=>(prev+next)))}\n    ;\n    //  console.log(initialCusts)\n  }, [get, response,props.loadState]);\n\n  useEffect(() => {\n    loadInitialData();\n  }, [loadInitialData]); // componentDidMount\n\n  const saveDetails = async (dailyPlan) => {\n    //  procMaps\n    const dailyapi = dailyPlan.dailyPlanId\n      ? \"/dailyPlan/update\"\n      : \"/dailyPlan/create\";\n    const returnObject = await post(api + dailyapi, dailyPlan);\n    if (returnObject.retValues.status == 1) {\n      if (dailyPlan.dailyPlanId) {\n        setDailyPlans(\n          dailyPlans.map((dayplan) =>\n            dayplan.dailyPlanId === returnObject.retValues.dailyPlan.dailyPlanId\n              ? returnObject.retValues.dailyPlan\n              : dayplan\n          )\n        );\n        AlertHandler(returnObject.retValues.message, \"success\");\n        props.loadStateContoller({type:\"dailyPlan\"});\n        setSelectedPlan({});\n      } else if (returnObject.retValues.dailyPlan.dailyPlanId > 0) {\n        setDailyPlans([...dailyPlans, returnObject.retValues.dailyPlan]);\n        AlertHandler(returnObject.retValues.message, \"success\");\n        setSelectedPlan({});\n      }\n    } else {\n      AlertHandler(returnObject.retValues.message, \"danger\");\n    }\n  };\n\n  const AlertHandler = (alertContent, alertType) => {\n    dispatch(\n      alertActions.showAlertHandler({\n        showAlert: !showAlert,\n        alertMessage: alertContent,\n        alertVariant: alertType,\n      })\n    );\n  };\n\n  return (\n    <SimpleCard>\n      <Card body className={classes.title}>\n        <h5>\n          {\" \"}\n          Daily Plan For - {props.selectedItem.product.productName}</h5>{\" \"}\n      </Card>\n      {/* <SimpleCard title=\"Monthly Target Schedule\">\n            <Table data={data} cols={dailyPlanTable(handleEdit,4)}></Table>  \n              </SimpleCard> */}\n      <SimpleCard title=\"Add Daily Schedule\">\n        <Row>\n          <DaiilyPlanForm \n            selected={selectedPlan}\n            onCancel={props.onCancel}\n            saveFunction={saveDetails}\n            orderId={props.selectedItem.orderId}\n            maxQty = {maxQty}\n            ></DaiilyPlanForm>\n        </Row>\n        <Row className={classes.tableCon}>\n          <Table\n            data={dailyPlans}\n            cols={DailyPlanTable(handleEdit)}\n            className={classes.tableCon}\n          ></Table>\n        </Row>\n      </SimpleCard>\n    </SimpleCard>\n  );\n}\n\nexport default DailyPlan;\n","// extracted by mini-css-extract-plugin\nexport default {\"monthlyform\":\"joborder_monthlyform__miPJk\",\"title\":\"joborder_title__YDO1q\",\"shRow\":\"joborder_shRow__YbWP9\",\"shCol\":\"joborder_shCol__7o-k+\",\"tableCon\":\"joborder_tableCon__hDOVG\",\"formCon\":\"joborder_formCon__5xkqa\"};","import React, { useState, useCallback, useEffect } from \"react\";\nimport CreateForm from '../../../../Components/Forms/CreateForm'\nimport api from \"../../../../Api\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport useFetch, { Provider } from \"use-http\";\nimport { alertActions } from \"../../../../store/alert-slice\";\nimport SimpleCard from \"../../../../UI/cards/SimpleCard\";\nimport Table from \"../../../../Components/tables/Table\";\nimport Ctheme from \"../../../../Components/Ctheme/Ctheme\";\n\nconst styles = {\n  upper: {\n    padding:Ctheme.paddings.pd,\n   backgroundColor: Ctheme.colors.dg ,\n   borderRadius:'1em'\n  },\n};\n\n\nconst rowWiseFields=4\nfunction JobOrderForm(props) {\n\n  const { get, post, response, loading, error } = useFetch({ data: [] });\n  \n  const getComingAfter = (goingBefore) => async () => {\n    console.log(goingBefore)\n    const selectArray = [{\"value\":\"\",\"label\":\"Select\"}]\n    if (goingBefore) {\n      const ppmaps = await post(api + \"/ppMap/loadOptionsAfter\", {\n        \"id\": goingBefore,\n      });\n      if (response.ok) {\n        setComingAfter([...selectArray,...ppmaps])\n      } else {\n\n      }\n    }\n  };\n\n  const [vendors,setVendors] =useState([{\"value\":\"\",\"label\":\"Select\"}]);\n  const [goingBefore,setGoingBefore] =useState([{\"value\":\"\",\"label\":\"Select\"}]);\n  const [comingAfter,setComingAfter] =useState([{\"value\":\"\",\"label\":\"Select\"}]);\n  const loadInitialOptions = useCallback(async () => {\n    // const { ok } = response // BAD, DO NOT DO THIS\n    const loadedVendors = await get(api+\"/supplier/loadOptions\");\n    setVendors([...vendors,...loadedVendors]);\n    const processMaps = await post(api+\"/ppMap/loadOptions\",{\"id\":props.selected.product.productId});\n    setGoingBefore([...goingBefore,...processMaps]);\n  }, [get, response]);\n  const [loadState,setLoadState] = useState(Math.random());\n\n  useEffect(() => { loadInitialOptions() }, [loadState]) // componentDidMount\n\n\n    const status={\n    title: 'JO Status',\n    type: 'select',\n    name: 'status',\n    contains: 'Select',\n    validationProps: \"Please Select Job Order status\",\n    options:[\n    {value:\"\", label:'Select'},\n    {value:1, label:'Send For Approval'},\n    {value:2, label:'Approved'},\n    {value:3, label:'Po Generated'},\n    {value:4, label:'Closed'},\n    {value:4, label:'Rejected'}\n  ]\n\n    }\n    const template = {\n        fields: [\n             {\n                 title: 'Date',\n                 type: 'date',\n                 name: 'joDate',\n                 contains:\"date\",\n                 validation:\"Date is Required\",\n                 inpprops:{\n                   format:\"dd/mm/yyyy\"\n                 },   \n           },\n           {\n             title: 'Quantity',\n             type: 'number',\n             name: 'requestedQty',\n             contains:\"number\",\n             validation:\"Quantity is Required\",\n             inpprops:{\n                 min:1,\n                 step:1,\n                 max:props.maxQty\n             }, \n       }, {\n        title: 'Outward Going before',\n        type: 'select',\n        name: 'goingBefore',\n        contains: 'Select',\n        validationProps: \"Please Select Process\",\n        options:goingBefore\n    }, {\n      title: 'Inward Coming After',\n      type: 'select',\n      name: 'comingAfter',\n      contains: 'Select',\n      validationProps: \"Please Select Process\",\n      options:comingAfter\n  },\n       {\n        title: 'Company Name',\n        type: 'select',\n        name: 'supplierId',\n        contains: 'Select',\n        validationProps: \"Please Select Outsorce Comppany Name\",\n        options:vendors\n    },{\n      title: 'Target Days',\n      type: 'number',\n      name: 'targetDays',\n      contains: 'number',\n      validationProps: \"Target Days is required\",\n      inpprops:{\n          min:1,\n          max:365\n      }\n  },\n       {\n           title: 'Remarks',\n           type: 'textarea',\n           name: 'remarks',\n           contains:\"textarea\",\n           inpprops:{\n             maxlength:128,\n             md:3\n           },\n           value:(props.selected.id ? props.selected.Remarks : \"\")   \n     },{\n      type: \"hidden\",\n      name: \"orderId\",\n      contains: \"number\",\n      value: props.orderId,\n    },\n           ]\n       }\n      const buttonName=(props.approval ? \"Edit\" : \"Add\")\n  \n      function onSubmit(values) {\n          console.log(values);\n         values.approvedQty = values.requestedQty;\n          props.saveFunction(values)\n        }\n        function validate(watchValues, errorMethods) {\n          let { errors, setError, clearErrors } = errorMethods;\n          // console.log(watchValues[\"serielNoTo\"]);\n          // Firstname validation\n          if (watchValues[0] !== \"\") {\n            //  console.log(watchValues[0]);\n            {\n              getComingAfter(watchValues[0])();\n            }\n          }\n        }    \n\n  return (\n    <CreateForm  template={template} \n    rowwise={rowWiseFields}\n     validate={validate}\n     watchFields={[\"goingBefore\"]}\n     onSubmit={onSubmit} \n     onCancel={props.onCancel}\n     buttonName={buttonName}\n     defaultValues={props.selectedItem} \n     styles={styles}>\n     </CreateForm>\n   \n  )\n}\n\nexport default JobOrderForm\n      \n \n    ","import React from 'react';\nimport * as BsIcons from 'react-icons/bs'\nimport {FiEdit} from 'react-icons/fi'\nimport {GiEntryDoor} from 'react-icons/gi'\n\n\n// This is the table constant/settings which needed to render table elements\nexport const JobOrderTable = (handleEdit,actions,exportTill) => {\n  return [\n    {\n        title: 'Date',\n        align:'center',\n        render: rowData => {\n          return <span>{rowData.joDate}</span>;\n        \n        },\n      },\n    {\n      title: 'Req_Qty',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.requestedQty}</span>;\n      },\n    },\n    {\n        title: 'Remarks',\n        align:'left',\n        render: rowData => {\n          return <span>{rowData.remarks}</span>;\n        },\n      },\n      {\n        title: 'Company',\n        align:'left',\n        render: rowData => {\n          return <span>{rowData.supplier.supplierName}</span>;\n        },\n      },{\n        title: 'Going Before',\n        align:'left',\n        render: rowData => {\n          return <span>{rowData.goingBeforeDetails.process.processName}</span>;\n        },\n      },{\n        title: 'Coming After',\n        align:'left',\n        render: rowData => {\n          return <span>{rowData.comingAfterDetails.process.processName}</span>;\n        },\n      },\n      {\n        title: 'Status',\n        align:'left',\n        render: rowData => {\n          return <span>{rowData.joStatus}</span>;\n        },\n      },\n      {\n      title: 'Edit',\n      align:'center',\n      render: rowData => {\n        return <>{`${rowData.joStatus}`==\"Awaiting_Approval\" ? <FiEdit style={{cursor:\"pointer\"}} onClick={handleEdit(rowData,actions[1]) }></FiEdit> : \"Cannot Edit\"}</>\n      },\n    }\n  ].slice(0,exportTill);\n};","import React from 'react'\nimport { Card } from 'react-bootstrap';\nimport CreateForm from '../../../../Components/Forms/CreateForm'\n\nfunction ReceivalForm(props) {\n  let rowWiseFields = 2;\n\n  let template = {\n    heading: 'Enter Receival Details',\n    fields: [\n      {\n        title: 'Date',\n        type: 'date',\n        name: 'date',\n        contains: 'date',\n        inpprops:{\n           format:\"dd/mm/yyyy\"\n        }\n    },\n        {\n            title: 'Quantity',\n            type: 'number',\n            name: 'Qty1',\n            contains: 'number',\n            inpprops:{\n                min:.1,\n                step:.5\n            }\n        }, {\n            title: 'Remarks',\n            type: 'textarea',\n            name: 'remarks',\n            contains:\"textarea\",\n            inpprops:{\n              maxlength:128,\n              md:6\n            },\n      },\n      {\n        title: 'Inward Entry Process',\n        type: 'select',\n        name: 'inwardStock',\n        contains: 'Select',\n        validationProps: \"Please Select Process\",\n        options:[\n        {value:\"\", label:'Select'},\n        {value:1, label:'Cutting & Fettling'},\n        {value:2, label:'Heat Treatment'},\n        {value:3, label:'Shot Blasting'}\n      ]\n    },\n      \n\n\n    ]\n}\n  return (\n    <Card>\n    <CreateForm  template={template}\n    // watchFields={['firstname','password']}\n     rowwise={rowWiseFields}\n     validate={validate}\n     onSubmit={onSubmit} \n     onCancel={props.onCancel}\n     buttonName=\"Add\">\n     </CreateForm>\n     </Card>\n  )\n}\n\nfunction onSubmit(values) {\n    console.log(values);\n  }\n  \n  function validate(watchValues, errorMethods) {\n    let { errors, setError, clearErrors } = errorMethods;\n  \n    // Firstname validation\n    if(watchValues['firstname'] === 'Admin'){\n        if(!errors['firstname']){\n            setError('firstname', {\n                type: 'manual',\n                message: 'You cannot use this first name'\n            })\n        }\n    }else{\n        if(errors['firstname'] && errors['firstname']['type'] === 'manual'){\n            clearErrors('firstname');\n        }\n    }\n  }\n\nexport default ReceivalForm","import React from 'react'\nimport CreateForm from '../../../../Components/Forms/CreateForm'\nimport {Row,Col,Form} from 'react-bootstrap'\nimport { useForm } from \"react-hook-form\";\n\nfunction InspectionForm(props) {\n\n    let { register, handleSubmit, formState:{errors}, watch, setError, clearErrors ,setValue} = useForm();\n   \n  let rowWiseFields = 2;\n\n  let template = {\n    heading: <Row className='justify-content-center'><Col>JO Inspection Entry</Col>\n </Row>,\nfields: [\n        {\n            title: 'Date',\n            type: 'date',\n            name: 'date',\n            contains:\"date\",\n            validation:\"Date is Required\",\n            inpprops:{\n              format:\"dd/mm/yy\"\n            },\n      },{\n        title: 'Defect Type',\n        type: 'select',\n        name: 'InwardType',\n        contains: 'Select',\n         options:[\n        {value:\"\", label:'Select'},\n        {value:1, label:'Type1'},\n        {value:0, label:'Pores'},\n\n      ]\n    }\n    , {\n        title: 'Remarks',\n        type: 'textarea',\n        name: 'remarks',\n        contains:\"textarea\",\n        inpprops:{\n          maxlength:128,\n          md:12\n        },\n         },{\n        title: 'Rejected Qty',\n        type: 'number',\n        name: 'Qty1',\n        contains: 'number',\n        inpprops:{\n            min:0,\n            step:1\n        }\n    },\n   \n\n\n    ]\n}\n    const acceptedQty = <Row><Col md={5}><Form.Group key=\"LineNo\">\n    <Form.Label htmlFor=\"LineNo\">Accepted Qty</Form.Label>\n    <Form.Control type=\"text\" id=\"LineNo\" disabled value=\"45\"\n    {...register(\"LineNo\",{ required: \"Line No is Required\" })}/>\n    {errors[\"LineNo\"] && ((\n<Form.Text className=\"text-danger\">\n{errors[\"LineNo\"]['message']}\n</Form.Text>\n))}\n</Form.Group></Col></Row>\n  return (\n    <CreateForm  template={template}\n    // watchFields={['firstname','password']}\n     rowwise={rowWiseFields}\n     validate={validate}\n     onSubmit={onSubmit} \n     onCancel={props.onCancel}\n     buttonName=\"Add\"\n     btButtons={acceptedQty}>\n\n     </CreateForm>\n  )\n}\n\nfunction onSubmit(values) {\n    console.log(values);\n  }\n  \n  function validate(watchValues, errorMethods) {\n    let { errors, setError, clearErrors } = errorMethods;\n  \n    // Firstname validation\n    if(watchValues['firstname'] === 'Admin'){\n        if(!errors['firstname']){\n            setError('firstname', {\n                type: 'manual',\n                message: 'You cannot use this first name'\n            })\n        }\n    }else{\n        if(errors['firstname'] && errors['firstname']['type'] === 'manual'){\n            clearErrors('firstname');\n        }\n    }\n  }\n\nexport default InspectionForm","import React, { useState, useCallback, useEffect } from \"react\";\nimport classes from \"./joborder.module.css\";\nimport SimpleCard from \"../../../../UI/cards/SimpleCard\";\nimport { Card, Row } from \"react-bootstrap\";\nimport JobOrderForm from \"./JobOrderForm\";\nimport Table from \"../../../../Components/tables/Table\";\nimport { jobOrderData } from \"./JobOrderData\";\nimport { JobOrderTable } from \"./JobOrderTable\";\nimport { Modal } from \"react-bootstrap\";\nimport ReceivalForm from \"./ReceivalForm\";\nimport InspectionForm from \"./InspectionForm\";\nimport api from \"../../../../Api\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport useFetch, { Provider } from \"use-http\";\nimport { alertActions } from \"../../../../store/alert-slice\";\n\nimport Ctheme from \"../../../../Components/Ctheme/Ctheme\";\n\nconst stylesUpper = {\n  margin: \"0\",\n  padding: \"0\",\n\n};\n\nconst stylesUpperTwo = {\n  margin: Ctheme.margins.mg,\n  \n  \n  /*backgroundColor:'yellow' */\n};\n\n\nfunction JobOrder(props) {\n  let rowWiseFields = 3;\n  const dispatch = useDispatch();\n  const [showAlert, alertMessage, alertVariant] = useSelector((state) => [\n    state.alertProps.showAlert,\n    state.alertProps.alertMessage,\n    state.alertProps.alertVariant,\n  ]);\n  const { get, post, response, loading, error } = useFetch({ data: [] });\n  const [stockDisplay, setStockDisplay] = useState({ stock: 0, produced: 0 });\n  let [oldEntry, setOldEntry] = useState([]);\n  const [loadState, setLoadState] = useState(Math.random());\n  var [maxQty,setMaxQty] = useState(props.selectedItem.quantity)\n \n  const saveDetails = async (entry) => {\n    //  procMaps\n    const prodEntryapi = entry.joId ? \"/jorder/update\" : \"/jorder/create\";\n    const returnObject = await post(api + prodEntryapi, entry);\n    console.log(returnObject);\n    if (returnObject.retValues.status == 1) {\n      if (entry.joId) {\n        setOldEntry(\n          oldEntry.map((odr) =>\n            odr.joId === returnObject.retValues.order.joId\n              ? returnObject.retValues.order\n              : odr\n          )\n        );\n        setOldEntry([returnObject.retValues.order,...oldEntry]);\n        AlertHandler(returnObject.retValues.message, \"success\");\n        setLoadState(Math.random());\n        console.log(loadState);\n      } else if (returnObject.retValues.order.joId> 0) {\n        setOldEntry([returnObject.retValues.order, ...oldEntry]);\n        //setOldEntry([...returnObject.retValues.prodEntry,...oldEntry]);\n        AlertHandler(returnObject.retValues.message, \"success\");\n        setLoadState(Math.random());\n        console.log(loadState);\n      }\n    } else {\n      AlertHandler(returnObject.retValues.message, \"danger\");\n    }\n  };\n\n  const loadInitialData = useCallback(async () => {\n    const intialdata = await post(api + \"/jorder/jorders\", {\n      orderId: props.selectedItem.orderId,\n      loadStateid: loadState,\n    });\n    console.log({ ...intialdata });\n    if (response.ok) setOldEntry(intialdata)\n    {intialdata.length >0 && setMaxQty(maxQty - intialdata.map(item=>item.requestedQty).reduce((prev,next)=>(prev+next)))}\n    \n  }, [post, response,loadState]);\n\n  useEffect(() => {\n    loadInitialData();\n  }, [loadInitialData]); // componentDidMount\n\n  const AlertHandler = (alertContent, alertType) => {\n    dispatch(\n      alertActions.showAlertHandler({\n        showAlert: !showAlert,\n        alertMessage: alertContent,\n        alertVariant: alertType,\n      })\n    );\n  };\n\n  const [showFormParams, setShowformparams] = useState({\n    showForm: false,\n    selectedForm: \"\",\n    selectedItem: {\n      id: 0,\n      productName: \"\",\n      cusName: \"\",\n      part: \"\",\n      quantity: \"\",\n      cost: \"\",\n    },\n  });\n\n  const [selectedItem, setSelectedItem] = useState({\n    id: 0,\n    Month: \"\",\n    Year: \"\",\n    Remarks: \"\",\n    Quantity: \"\",\n  });\n  const [approval, setApproval] = useState(false);\n  const actions = [\"edit\", \"approval\", \"receival\", \"inspection\"];\n\n  const handleEdit = (item, action) => () => {\n    if (action == \"approval\") {\n      setApproval(true);\n      setSelectedItem({ ...selectedItem, ...item });\n    } else if (action == \"edit\") {\n        setSelectedItem({item});\n    }else if (action == \"receival\") {\n      const newState = {\n        showForm: true,\n        selectedForm: (\n          <ReceivalForm\n            onCancel={hideFormHandler}\n            selectedItem={showFormParams.selectedItem}\n          />\n        ),\n        selectedItem: { ...item },\n      };\n      setShowformparams({ ...showFormParams, ...newState });\n    } else if (action == \"inspection\") {\n      const newState = {\n        showForm: true,\n        selectedForm: (\n          <InspectionForm\n            onCancel={hideFormHandler}\n            selectedItem={showFormParams.selectedItem}\n          />\n        ),\n        selectedItem: { ...item },\n      };\n      setShowformparams({ ...showFormParams, ...newState });\n    }\n  };\n\n  const hideFormHandler = () => {\n    setShowformparams({\n      ...showFormParams,\n      showForm: false,\n      selectedForm: \"\",\n      selectedItem: {\n        ...showFormParams.selectedItem,\n        ...{\n          id: 0,\n          productName: \"\",\n          cusName: \"\",\n          part: \"\",\n          quantity: \"\",\n          cost: \"\",\n        },\n      },\n    });\n  };\n\n  return (\n    <SimpleCard upper={stylesUpper} useUpperTwoStyle={false} >\n      <Modal show={showFormParams.showForm} onHide={hideFormHandler}>\n        <Modal.Header closeButton></Modal.Header>\n        <Modal.Body>{showFormParams.selectedForm}</Modal.Body>\n      </Modal>\n      <div body className={classes.ctitle}  style={{\n                  backgroundColor: Ctheme.colors.ttle,\n                 \n                  \n                }}>\n        <h5 className={classes.title}>\n          Job Order Details - {props.selectedItem.product.productName}({props.selectedItem.product.customer.name})\n        </h5>{\" \"}\n      </div>{\" \"}\n      <SimpleCard uppertwo={stylesUpperTwo} useUpperTwoStyle={true}>\n        <JobOrderForm\n          selected={props.selectedItem}\n          approval={approval}\n          saveFunction = {saveDetails}\n          selectedItem = {selectedItem}\n          orderId = {props.selectedItem.orderId}\n          maxQty = {maxQty}\n        ></JobOrderForm>\n        <Table\n          data={oldEntry}\n          cols={JobOrderTable(handleEdit, actions)}\n          rows={5}\n          className={classes.tableCon}\n          \n        ></Table>\n      </SimpleCard>\n    </SimpleCard>\n  );\n}\nexport default JobOrder;\n","// extracted by mini-css-extract-plugin\nexport default {\"monthlyform\":\"dispatch_monthlyform__dfLf5\",\"title\":\"dispatch_title__i5vaK\",\"shRow\":\"dispatch_shRow__xvj8R\",\"shCol\":\"dispatch_shCol__i8WT-\",\"tableCon\":\"dispatch_tableCon__LQqeG\",\"formCon\":\"dispatch_formCon__w6yLZ\"};","import React from 'react'\nimport CreateForm from '../../../../Components/Forms/CreateForm'\nimport Ctheme from '../../../../Components/Ctheme/Ctheme';\nconst styles = {\n  upper: {\n    margin: '0rem 0rem 0 0rem',\n    padding: Ctheme.paddings.pd,\n    backgroundColor: Ctheme.colors.dg,\n    borderRadius:'1rem' // Add the padding property here\n  },\n  upperRow: {\n    \n  }\n};\n\nconst rowWiseFields=4\nfunction DispatchForm(props) {\n    const template = {\n        fields: [\n             {\n                 title: 'Date',\n                 type: 'date',\n                 name: 'invoiceDate',\n                 contains:\"date\",\n                 validation:\"Date is Required\",\n                 inpprops:{\n                   format:\"dd/mm/yy\"\n                 },\n           },\n           {\n             title: 'Quantity',\n             type: 'number',\n             name: 'quantity',\n             contains:\"number\",\n             inpprops:{\n                 min:1,\n                 step:1,\n                 max:props.orderQty\n             },\n            \n   \n       },\n       {\n        title: 'Dc No',\n        type: 'text',\n        name: 'invoiceNo',\n        contains:\"text\",\n        inpprops:{\n            minlength:3,\n            maxlength:80\n        },\n       \n\n  },{\n    title: 'Vechicle No',\n    type: 'text',\n    name: 'vehicleDetails',\n    contains:\"text\",\n    inpprops:{\n        minlength:3,\n        maxlength:80\n    },\n   \n\n},\n       {\n           title: 'Remarks',\n           type: 'textarea',\n           name: 'remarks',\n           contains:\"textarea\",\n           inpprops:{\n             maxlength:128,\n             md:3\n           },\n            },{\n                type: \"hidden\",\n                name: \"orderId\",\n                contains: \"number\",\n                value: props.orderId,\n              }\n\n           ]\n       }\n      \n\n       function onSubmit(values) {\n        props.saveFunction(values);\n      }\n      const buttonName= \"Add\"\n  return (\n     <CreateForm  template={template} \n    rowwise={rowWiseFields}\n     validate={validate}\n     onSubmit={onSubmit} \n     onCancel={props.onCancel}\n     buttonName={buttonName}\n     defaultValues={props.selected}\n     styles={styles}>\n     </CreateForm>\n   \n   )\n}\n\n\n  \n  function validate(watchValues, errorMethods) {\n    let { errors, setError, clearErrors } = errorMethods;\n  \n    // Firstname validation\n    if(watchValues['firstname'] === 'Admin'){\n        if(!errors['firstname']){\n            setError('firstname', {\n                type: 'manual',\n                message: 'You cannot use this first name'\n            })\n        }\n    }else{\n        if(errors['firstname'] && errors['firstname']['type'] === 'manual'){\n            clearErrors('firstname');\n        }\n    }\n  }\n  \n\n  export default DispatchForm\n","import React from 'react';\nimport * as BsIcons from 'react-icons/bs'\nimport * as FaIcons from 'react-icons/fa'\nimport {AiOutlinePullRequest,AiOutlineReconciliation} from 'react-icons/ai'\nimport {FiEdit} from 'react-icons/fi'\n\n\n// This is the table constant/settings which needed to render table elements\n\n\nexport const DispatchTable = (showFormHandler) => {\n  return [\n    {\n      title: 'Dispatch Date',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.invoiceDate}</span>;\n      },\n    },\n    {\n      title: 'Quantity',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.quantity}</span>;\n      \n      },\n    },{\n      title: 'Invoice Details',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.invoiceNo}</span>;\n      },\n    },\n    {\n      title: 'Vechile Details',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.vehicleDetails}</span>;\n      },\n    },{\n        title: 'Remarks',\n        align:'center',\n        render: rowData => {\n          return <span>{rowData.remarks}</span>;\n        },\n      },{\n        title: 'Edit',\n        align:'center',\n        render: rowData => {\n          return <FiEdit style={{cursor:\"pointer\"}} onClick={showFormHandler(rowData,\"edit\")}></FiEdit>\n        },\n      }\n   \n  ];\n};\n\n\nexport default DispatchTable","import React, { useState, useCallback, useEffect } from \"react\";\nimport classes from \"./dispatch.module.css\";\nimport SimpleCard from \"../../../../UI/cards/SimpleCard\";\nimport { Card } from \"react-bootstrap\";\nimport DispatchForm from \"./DispatchForm\";\nimport { Dispatchdata } from \"./Dispatchdata\";\nimport DispatchTable from \"./DispatchTable\";\nimport Table from \"../../../../Components/tables/Table\";\nimport api from \"../../../../Api\";\nimport useFetch, { Provider } from \"use-http\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { modalActions } from \"../../../../store/modal-Slice\";\nimport { alertActions } from \"../../../../store/alert-slice\";\nimport { Col, Row } from \"react-bootstrap\";\nimport Ctheme from \"../../../../Components/Ctheme/Ctheme\";\n\n\nconst stylesUpper = {\n  margin: \"0\",\n  padding: \"0\",\n\n};\nconst styles = { \n  table: {\n  padding: \"0rem\",\n  margin:'0rem'\n  \n  },\n  \n};\n\nconst stylesUpperTwo = {\n  margin: Ctheme.margins.mg,\n  \n  /*backgroundColor:'yellow' */\n};\n\n\nfunction Dispatch(props) {\n  const { get, post, response, loading, error } = useFetch({ data: [] });\n  const [dispatches, setDispatches] = useState([]);\n  const [showAlert, alertMessage, alertVariant] = useSelector((state) => [\n    state.alertProps.showAlert,\n    state.alertProps.alertMessage,\n    state.alertProps.alertVariant,\n  ]);\n\n  const [showModal, selectedForm, selectedData] = useSelector((state) => [\n    state.modalProps.showModal,\n    state.modalProps.selectedForm,\n    state.modalProps.selectedData,\n  ]);\n  const [loadState, setLoadState] = useState(Math.random());\n\n  const dispatch = useDispatch();\n  const AlertHandler = (alertContent, alertType) => {\n    dispatch(\n      alertActions.showAlertHandler({\n        showAlert: !showAlert,\n        alertMessage: alertContent,\n        alertVariant: alertType,\n      })\n    );\n  };\n\n  const loadInitialdata = useCallback(async () => {\n    const { ok } = response; // BAD, DO NOT DO THIS\n    const prodId = props.selectedItem.product.productId;\n    const loadeddata = await post(api + \"/dispatchEntry/dispatchEntrys\", {\n      orderId: props.selectedItem.orderId,\n      loadStateTime: Date().toLocaleString(),\n    });\n    loadeddata ? setDispatches(loadeddata) : setDispatches([]);\n    //console.log({ ...props.selectedItem.productId });\n  }, [get, response]);\n\n  useEffect(() => {\n    loadInitialdata();\n  }, [loadState]);\n\n  const saveDetails = async (entry) => {\n    //  procMaps\n    const insEntryapi = entry.dispatchId\n      ? \"/dispatchEntry/update\"\n      : \"/dispatchEntry/create\";\n    console.log(insEntryapi);\n    const returnObject = await post(api + insEntryapi, entry);\n    console.log(returnObject);\n    if (returnObject.retValues.status == 1) {\n      if (entry.dispatchId) {\n        setDispatches([returnObject.retValues.dispatch]);\n        setLoadState(Math.random());\n        props.loadStateController()\n        AlertHandler(returnObject.retValues.message, \"success\");\n      } else if (returnObject.retValues.dispatch.dispatchId > 0) {\n        setDispatches([returnObject.retValues.dispatch]);\n        AlertHandler(returnObject.retValues.message, \"success\");\n        setLoadState(Math.random());\n        \n        props.loadStateController()\n      }\n    } else {\n      AlertHandler(returnObject.retValues.message, \"danger\");\n    }\n  };\n  const [selectedItem, setSelectedItem] = useState({\n    id: \"\",\n    Month: \"\",\n    Year: \"\",\n    Remarks: \"\",\n    Quantity: \"\",\n  });\n\n  const form_header = (\n    <>\n      <Card body className={classes.title}>\n        <Row>\n          <Col\n            style={{\n              backgroundColor: Ctheme.colors.yllw,\n              justifyContent: \"left\",\n              borderRadius: \"5%\",\n              color: 'black'\n            }}\n            md={2}\n          >\n            Stock Qty <br />\n            {props.selectedItem.fgStock}\n          </Col>\n          <Col md={10}>\n            {\" \"}\n            <h4>\n              Dispatch Details - {props.selectedItem.product.productName} ({props.selectedItem.product.customer.name})\n            </h4>{\" \"}\n          </Col>\n        </Row>\n      </Card>\n    </>\n  );\n\n  const handleEdit = (item) => () => {\n    setSelectedItem({ ...selectedItem, ...item });\n    // alert(JSON.stringify(item))\n  };\n  return (\n    <SimpleCard upper={stylesUpper} useUpperTwoStyle={false} >\n      {form_header}\n      <SimpleCard uppertwo={stylesUpperTwo} useUpperTwoStyle={true}>\n        <DispatchForm\n          orderQty = {props.selectedItem.fgStock}\n          orderId={props.selectedItem.orderId}\n          selected={selectedItem}\n          saveFunction={saveDetails}\n          onCancel={props.onCancel}           \n        ></DispatchForm>\n        <Table\n          data={dispatches}\n          cols={DispatchTable(handleEdit)}\n          className={classes.tableCon}\n          styles={styles}\n        ></Table>\n      </SimpleCard>\n    </SimpleCard>\n  );\n}\n\nexport default Dispatch;\n","import React,{useState} from 'react'\nimport CreateForm from '../../../../Components/Forms/CreateForm'\nimport {Col,Row,Card} from 'react-bootstrap'\nimport classes from './dailyentry.module.css'\n\nfunction RevisionForm(props) {\n  let rowWiseFields = 2;\n\n  const form_header=<>\n  <Card body className={classes.title}>\n    <Row>\n    <Col style={{backgroundColor:\"grey\",justifyContent:'left',borderRadius:\"5%\"} } md={2}>Available Qty <br/> 66</Col>\n    <Col md={{ span: 6, offset: 1 }}> <h4>{`Enter ${props.selectedItem} Details`}</h4> </Col> \n    <Col style={{backgroundColor:\"grey\",justifyContent:'right',borderRadius:\"5%\"}} md={{ span: 2, offset: 1}}>Produced Qty<br/> 89</Col>\n    </Row>\n    </Card>\n  </>\n  let [defValues,setDefValues]=useState(props.selected);\n  let template = {\n    heading:\"Enter Revision Details\",\n     fields: [\n        {\n            title: 'Revised Date',\n            type: 'date',\n            name: 'revisedDate',\n            contains:\"date\",\n            validation:\"Date is Required\",\n            inpprops:{\n              format:\"dd/mm/yy\"\n            },\n      },{\n        title: 'Remarks',\n        type: 'textarea',\n        name: 'remarks',\n        contains:\"textarea\",\n        inpprops:{\n          maxlength:128,\n          md:6\n        },\n         }\n    ]\n}\n\n\nfunction onSubmit(values) {\n  props.saveFunction(values);\n  setDefValues({});\n}\n  return (\n    <>\n    <CreateForm  template={template}\n    // watchFields={['firstname','password']}\n     rowwise={rowWiseFields}\n     validate={validate}\n     onSubmit={onSubmit} \n     onCancel={props.onCancel}\n     buttonName=\"Request Revision\"\n     defaultValues={defValues}>\n     </CreateForm>\n     </>\n  )\n}\n\n\n  \n  function validate(watchValues, errorMethods) {\n    let { errors, setError, clearErrors } = errorMethods;\n  \n    // Firstname validation\n    if(watchValues['firstname'] === 'Admin'){\n        if(!errors['firstname']){\n            setError('firstname', {\n                type: 'manual',\n                message: 'You cannot use this first name'\n            })\n        }\n    }else{\n        if(errors['firstname'] && errors['firstname']['type'] === 'manual'){\n            clearErrors('firstname');\n        }\n    }\n  }\n\nexport default RevisionForm","import React,{useState,useCallback,useEffect} from 'react'\nimport SimpleCard from '../../../../UI/cards/SimpleCard'\nimport DeliveryTable from '../DeliverySchedule/DeliveryTable'\nimport Table from '../../../../Components/tables/Table'\nimport {deliveryData} from '../DeliverySchedule/DeliveryData'\nimport { Modal } from 'react-bootstrap'\nimport RevisionForm from './RevisionForm'\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { modalActions } from \"../../../../store/modal-Slice\";\nimport { alertActions } from \"../../../../store/alert-slice\";\nimport useFetch, { Provider } from \"use-http\";\nimport api from \"../../../../Api\";\nimport { GiConsoleController } from 'react-icons/gi'\n\nfunction ProductionApp(props) {\n  const actions=[\"reviseDate\",\"approve\"]\n  const { get, post, response, loading, error } = useFetch();\n  let [deliveries,setDeliveries] = useState();\n  const [order, setOrder] = useState(props.selectedItem);\n  const [selectedItem,setSelectedItem]=useState({\n    id:\"\",\n    Month:\"\",\n    Year:\"\",\n    Remarks:\"\",\n    Quantity:\"\"\n  })\n  const [showAlert, alertMessage, alertVariant] = useSelector((state) => [\n    state.alertProps.showAlert,\n    state.alertProps.alertMessage,\n    state.alertProps.alertVariant,\n  ]);\n  const dispatch = useDispatch();\n\n  const [showFormParams,setShowformparams]=useState({\n    showForm:false,\n    selectedForm:\"\",\n    title:\"\",\n    selectedItem:{ id:0,\n        productName: \"\",\n        cusName: \"\",\n        part: \"\",\n        quantity: \"\",\n        cost: \"\"\n        }\n})\n  const handleEdit=(item,action)=>()=>{\n    //setSelectedItem({...selectedItem,...item})\n    if(action==\"reviseDate\"){\n        const newState={\n            showForm:true,\n            selectedForm:<RevisionForm onCancel={hideFormHandler} \n            selected={item}\n            orderId = {props.selectedItem.orderId}\n            saveFunction = {saveDetails}/>,\n            selectedItem:{item},                     \n            title:\"\"\n        }\n        setShowformparams({...showFormParams,...newState})\n    }else if(action==\"approve\"){\n        alert(action)\n        window.confirm(JSON.stringify(item))\n    }\n    }\n\n    const intialLoadFuntion = useCallback(async()=>{\n      console.log(props.loadState)\n      let loadedData = await post(api + \"/deliSchedule/schedules\",{\"id\":props.selectedItem.orderId,\"loadState\":props.loadState})\n     console.log(loadedData)\n      if (response.ok) {\n        setDeliveries(loadedData);\n      }\n    },[post,response,props.loadState])\n     \nconst saveDetails =async (schedule) => {\n      //  procMaps\n      const scheduleapi = \"/deliSchedule/update\";\n      const returnObject = await post(api + \"/deliSchedule/update\", schedule);\n      console.log({returnObject})\n      if (returnObject.retValues.status == 1) {\n        if (schedule.deliveryId) {\n          setDeliveries(\n            deliveries.map((del) =>\n              del.deliveryId === returnObject.retValues.delischedule.deliveryId\n                ? returnObject.retValues.delischedule\n                : del\n            )\n          );\n          console.log(props.loadState)\n         hideFormHandler();\n         props.loadStateContoller({type:\"approval\"});\n         props.loadStateContoller({type:\"orderSearch\"});\n         //dispatch(loadStateActions.alterLoadStatelHandler())\n\n          AlertHandler(returnObject.retValues.message, \"success\");\n        } } else {\n        dispatch(modalActions.hideModalHandler());\n        AlertHandler(returnObject.retValues.message, \"danger\");\n      }\n    }\n    const hideFormHandler=()=>{\n      setShowformparams({...showFormParams,\n          showForm:false,\n          selectedForm:\"\",\n          title:\"\",\n          selectedItem:{...showFormParams.selectedItem,...{ id:0,\n              productName: \"\",\n              cusName: \"\",\n              part: \"\",\n              quantity: \"\",\n              cost: \"\",\n              }}\n      })\n     \n      }\n    useEffect(()=>{\n      \n  // fetchData();\n  \n    intialLoadFuntion()\n  \n}, [intialLoadFuntion]);  // componentDidMount\n\n    const AlertHandler = (alertContent, alertType) => {\n      dispatch(\n        alertActions.showAlertHandler({\n          showAlert: !showAlert,\n          alertMessage: alertContent,\n          alertVariant: alertType,\n        })\n      );\n    };\n\n  \n  return (\n      <>\n    <Modal {...props} showFormHandler={handleEdit}\n    size=\"md\"\n    aria-labelledby=\"contained-modal-title-vcenter\"\n    centered  show={showFormParams.showForm} onHide={hideFormHandler}>\n      <Modal.Header closeButton>\n        {showFormParams.title}\n      </Modal.Header>\n      <Modal.Body>{showFormParams.selectedForm}</Modal.Body>\n    </Modal>\n   <SimpleCard title=\"Approve Production Schedules\">\n       <Table data={deliveries} cols={DeliveryTable(handleEdit,actions,[4,6])} ></Table>\n   </SimpleCard>\n   </>\n  )\n}\n\nexport default ProductionApp\n","// Common utility function to filter data based on a search query\nexport const filterData = (data, searchQuery, filterFields) => {\n    if (!searchQuery) {\n      return data;\n    }\n  \n    const query = searchQuery.toLowerCase();\n    return data.filter((item) => {\n      for (const field of filterFields) {\n        const fieldValue = getValueByPath(item, field)?.toString().toLowerCase();\n        if (fieldValue && fieldValue.includes(query)) {\n          return true;\n        }\n      }\n      return false;\n    });\n  };\n  \n  // Helper function to get nested object values based on the field path\n  const getValueByPath = (obj, path) => {\n    const keys = path.split(\".\");\n    let value = obj;\n  \n    for (const key of keys) {\n      value = value[key];\n      if (value === undefined) {\n        break;\n      }\n    }\n  \n    return value;\n  };\n  ","import React, { useState, useEffect, useCallback, useReducer } from \"react\";\nimport CreateForm from \"../../../Components/Forms/CreateForm\";\nimport SearchCard from \"../../../UI/cards/SearchCard\";\nimport Modal from \"../../../UI/Modal/Modal\";\nimport OrderEntry from \"./OrderEntry\";\nimport OrderTable from \"./OrderTable\";\nimport classes from \"./orders.module.css\";\nimport { data } from \"./data\";\nimport Table from \"../../../Components/tables/Table\";\nimport SimpleCard from \"../../../UI/cards/SimpleCard\";\nimport MonthlyPlan from \"./MonthlyPlan/MonthlyPlan\";\nimport DailyPlan from \"./DailyPlan/DailyPlan\";\nimport JobOrder from \"./JobOrderRequest/JobOrder\";\nimport ProcessView from \"./ProcessView/ProcessView\";\nimport Dispatch from \"./Dispatch/Dispatch\";\nimport { Row, Col } from \"react-bootstrap\";\nimport ProductionApp from \"./ProductionApproval/ProductionApp\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { modalActions } from \"../../../store/modal-Slice\";\nimport { alertActions } from \"../../../store/alert-slice\";\nimport { Fa500Px } from \"react-icons/fa\";\nimport useFetch, { Provider } from \"use-http\";\nimport api from \"../../../Api\";\nimport { render } from \"@testing-library/react\";\nimport { loadStateActions } from \"../../../store/loadState-Slice\";\nimport { orderEntryActions } from \"../../../store/loadStates/orderEntry-slice\";\nimport NewProcessView from \"./ProcessView/NewProcessView\";\nimport { filterData } from \"../../../NewComponent/dataUtils\";\n//making sure the content reloads from db\n\n\nconst styles = {\n  seach: {\n    \n    padding: \"0 3rem\", // Add the padding property here\n  },\n};\n\n       \n\nconst rowWiseFields = 4;\n\nconst actions = [\n  \"orderForm\",\n  \"monthlyPlan\",\n  \"dailyPlan\",\n  \"jobOrder\",\n  \"processView\",\n  \"dispatch\",\n  \"approval\",\n];\nfunction OrderSearch(props) {\n  const { get, post, response, loading, error } = useFetch({ data: [] });\n  const [orders, setOrders] = useState([]);\n  const [products,setProducts] = useState([{value:\"\",label:\"Select\"}]);\n  const [customers,setCustomers] = useState([{value:\"\",label:\"Select\"}]);\n\n  const loadStateReducer = (action) => {\n    if (action.type === \"orderSearch\") {\n      dispatch( orderEntryActions.alterOrderSearchlHandler());\n    } else if (action.type === \"orderEntry\") {\n      dispatch(orderEntryActions.alterOrderEntrylHandler());\n    } else if (action.type === \"monthlyPlan\") {\n      dispatch(orderEntryActions.alterMonthlyPlanHandler());\n    } else if (action.type === \"dailyPlan\") {\n      dispatch( orderEntryActions.alterDailyPlanHandler());\n    } else if (action.type === \"jobOrder\") {\n      dispatch(orderEntryActions.alterJobOrderHandler());\n    } else if (action.type === \"processView\") {\n      dispatch(orderEntryActions.alterProcessViewHandler());\n    } else if (action.type === \"approval\") {\n      dispatch(orderEntryActions.alterApprovalHandler());\n    }\n  };\n  const loadStateOrder = useSelector((state) => state.orderEntryProps);\n  const handleLoadChange = (action) => {\n    loadStateReducer(action);\n    // dispatch(orderEntryActions.);\n    console.log(loadStateOrder.approval);\n  };\n  const [showModal, selectedForm, selectedData] = useSelector((state) => [\n    state.modalProps.showModal,\n    state.modalProps.selectedForm,\n    state.modalProps.selectedData,\n  ]);\n  \n  const [showAlert, alertMessage, alertVariant] = useSelector((state) => [\n    state.alertProps.showAlert,\n    state.alertProps.alertMessage,\n    state.alertProps.alertVariant,\n  ]);\n  const dispatch = useDispatch();\n\n  const loadInitialData = useCallback(async () => {\n    // const { ok } = response // BAD, DO NOT DO THIS\n    const initialOrders = await post(api + \"/order/orders\" ,{\"id\":0,\"loadTime\":Date().toLocaleString()});\n    const loadedcusts = await get(api+\"/customer/loadOptions\");\n    const loadedprods = await get(api + \"/product/loadOptions\");\n\n\n    console.log(Date().toLocaleString())\n    if (response.ok) {\n      setOrders(initialOrders);\n      setCustomers([...customers,...loadedcusts])\n      setProducts([...products,...loadedprods])\n    }\n    \n    //  console.log(initialCusts)\n  }, [get, response]);\n\n  useEffect(() => {\n       loadInitialData();\n    \n  }, [loadStateOrder.orderSearch]); // componentDidMount\n\n  const AlertHandler = (alertContent, alertType) => {\n    dispatch(\n      alertActions.showAlertHandler({\n        showAlert: !showAlert,\n        alertMessage: alertContent,\n        alertVariant: alertType,\n      })\n    );\n  };\n\n\n  const template = {\n    fields: [\n      {\n        title: \"From Date\",\n        type: \"date\",\n        name: \"fromDate\",\n        contains: \"date\",\n        inpprops: {\n          format: \"dd/mm/yy\",\n                },\n      },  {\n        title: \"To Date\",\n        type: \"date\",\n        name: \"toDate\",\n        contains: \"date\",\n        inpprops: {\n          format: \"dd/mm/yy\",\n                },\n      },{\n        title: \"Customer Name\",\n        type: \"select\",\n        name: \"customerId\",\n        contains: \"Select\",\n        options: customers,\n       },\n      {\n        title: \"Product Name\",\n        type: \"select\",\n        name: \"productId\",\n        contains: \"Select\",\n        options: products,\n      },\n      {\n        title: \"Order No\",\n        type: \"text\",\n        name: \"orderNo\",\n        contains: \"text\",\n       inpprops:{}\n      }\n    ],\n  };\n\n  function onSubmit(values) {\n    values.random = Math.random();\n    console.log(values);\n    searchDetails(values);\n  }\n\n  const searchDetails = async (values) => {\n    //  procMaps\n    const orderapi =  \"/order/searchOrders\";\n    console.log(orderapi);\n    const returnObject = await post(api + orderapi, values);\n    console.log(returnObject);\n    if(returnObject.length>0){\n      setOrders(returnObject);\n    }else{\n      setOrders([])\n    }\n    \n   \n  };\n\n  const loadProducts = useCallback(async(customerId)=>{\n    const loadedprods = await post(api + \"/product/loadProductsByCustomer\" , {\"id\":customerId});\n   // setProds([...prods, ...loadedprods]);\n   setProducts([...[{value:\"\",label:\"Select\"}],...loadedprods])\n  }, [post, response]);\n\n  const saveDetails = async (order) => {\n    //  procMaps\n    const orderapi = order.orderId ? \"/order/update\" : \"/order/create\";\n    console.log(orderapi);\n    const returnObject = await post(api + orderapi, order);\n    console.log(returnObject);\n    if (returnObject.retValues.status == 1) {\n      if (order.orderId) {\n        setOrders(\n          orders.map((odr) =>\n            odr.orderId === returnObject.retValues.order.orderId\n              ? returnObject.retValues.order\n              : odr\n          )\n        );\n        dispatch(modalActions.hideModalHandler());\n        AlertHandler(returnObject.retValues.message, \"success\");\n      } else if (returnObject.retValues.order.orderId > 0) {\n        setOrders([returnObject.retValues.order, ...orders]);\n        dispatch(modalActions.hideModalHandler());\n        AlertHandler(returnObject.retValues.message, \"success\");\n      }\n    } else {\n      dispatch(modalActions.hideModalHandler());\n      AlertHandler(returnObject.retValues.message, \"danger\");\n    }\n  };\n\n  const showFormHandler = (item, action) => () => {\n    if (action === \"orderForm\") {\n      dispatch(\n        modalActions.showModalHandler({\n          selectedData: { ...item },\n          selectedForm: (\n            <OrderEntry\n              onCancel={() => dispatch(modalActions.hideModalHandler())}\n              selectedItem={{ ...item }}\n              saveFunction={saveDetails}\n              loadState={loadStateOrder.orderSearch}\n              loadStateContoller={handleLoadChange}\n            />\n          ),\n          showModal: true,\n        })\n      );\n    } else if (action == \"monthlyPlan\") {\n      // alert(JSON.stringify({...item}));\n      dispatch(\n        modalActions.showModalHandler({\n          selectedData: { ...item },\n          showModal: true,\n          selectedForm: (\n            <MonthlyPlan\n              onCancel={() => dispatch(modalActions.hideModalHandler())}\n              selectedItem={item}\n              loadState={loadStateOrder.monthlyPlan}\n              loadStateContoller={handleLoadChange}\n            />\n          ),\n        })\n      );\n    } else if (action == \"dailyPlan\") {\n      // alert(JSON.stringify({...item}));\n      //setShowformparams({...showFormParams,showFormParams.selectedItem:item})\n      dispatch(\n        modalActions.showModalHandler({\n          selectedData: { ...item },\n          selectedForm: (\n            <DailyPlan\n              onCancel={() => dispatch(modalActions.hideModalHandler())}\n              selectedItem={item}\n              loadState={loadStateOrder.dailyPlan}\n              loadStateContoller={handleLoadChange}\n            />\n          ),\n          showModal: true,\n        })\n      );\n    }  else if (action == \"dispatch\") {\n      // alert(JSON.stringify({...item}));\n\n      dispatch(\n        modalActions.showModalHandler({\n          selectedData: { ...item },\n          selectedForm: (\n            <Dispatch\n              onCancel={() => dispatch(modalActions.hideModalHandler())}\n              selectedItem={{ ...item }}\n              saveFunction={saveDetails}\n              loadStateController={handleLoadChange}\n            />\n          ),\n          showModal: true,\n        })\n      );\n    }else if (action == \"jobOrder\") {\n      // alert(JSON.stringify({...item}));\n      dispatch(\n        modalActions.showModalHandler({\n          selectedData: { ...item },\n          selectedForm: (\n            <JobOrder\n              onCancel={() => dispatch(modalActions.hideModalHandler())}\n              selectedItem={item}\n              loadState={loadStateOrder.jobOrder}\n              loadStateContoller={handleLoadChange}\n            />\n          ),\n          showModal: true,\n        })\n      );\n    } else if (action == \"processView\") {\n      dispatch(\n        modalActions.showModalHandler({\n          selectedData: { ...item },\n          selectedForm: (\n            <NewProcessView\n              onCancel={() => dispatch(modalActions.hideModalHandler())}\n              selectedItem={item}\n              loadState={loadStateOrder.processView}\n              loadStateContoller={handleLoadChange}\n            />\n          ),\n          showModal: true,\n        })\n      );\n    } else if (action == \"approval\") {\n      // alert(JSON.stringify({...item}));\n      dispatch(\n        modalActions.showModalHandler({\n          selectedData: { ...item },\n          selectedForm: (\n            <ProductionApp\n              onCancel={() => dispatch(modalActions.hideModalHandler())}\n              selectedItem={item}\n              loadState={loadStateOrder.approval}\n              loadStateContoller={handleLoadChange}\n            />\n          ),\n          showModal: true,\n        })\n      );\n    }\n  };\n\n\n  function validate(watchValues, errorMethods) {\n    let { errors, setError, clearErrors } = errorMethods;\n  //[2,5]\n     // Firstname validation\n     if(watchValues[0] != \"\"){\n        loadProducts(watchValues[0]);\n    }\n  }\n\n  // New Codes \n\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Update the search query state based on user input\n  const handleSearchInputChange = (query) => {\n    setSearchQuery(query);\n  };\n\n  //  Define the fields to filter (based on  table data structure)\n  const filterFields = [\n    \"product.customer.name\", \n    \"product.productName\", \n    \"orderNo\",\n  ];\n\n  //  filterData function to filter the orders\n  const filteredOrders = filterData(orders, searchQuery, filterFields);\n\n  return (\n    <div className={classes.container}>\n      <SearchCard\n        title=\"Order Search\"\n        buttonName=\"New Order\"\n        onHeaderClick={showFormHandler({}, \"orderForm\")}\n        bottonShow={showModal}\n      \n      >\n        <CreateForm\n          template={template}\n          watchFields={[\"customerId\"]}     \n          rowwise={4}\n          validate={validate}\n          onSubmit={onSubmit}\n          onCancel={props.onCancel}\n          buttonName=\"Search\"\n          styles={styles}\n        ></CreateForm>\n      </SearchCard>\n      <SimpleCard md={12}>\n        {<Table\n          cols={OrderTable(showFormHandler, actions)}\n          data={filteredOrders} \n          rows={10}\n          value={searchQuery}\n          onChange={handleSearchInputChange}\n        />}\n      </SimpleCard>\n    </div>\n  );\n}\n\nexport default OrderSearch;\n\n\n\n\n"],"names":["props","styles","dynamicStyles","_jsxs","Card","className","classes","style","_objectSpread","search","background","children","_jsx","Header","Row","Col","xs","md","bottonShow","span","offset","title","Button","variant","onClick","onHeaderClick","buttonName","Body","_useState","useState","_useState2","_slicedToArray","defValues","_useState3","deliveries","_useState4","_useForm","useForm","defaultValues","register","handleSubmit","errors","formState","reset","watch","setError","clearErrors","setValue","useEffect","Form","formcon","backgroundColor","Ctheme","colors","dgc","borderRadius","padding","paddings","pdc","Group","Label","htmlFor","Control","type","id","name","required","formBorder","Text","min","step","max","maxQty","value","orderId","delivery","deliveryId","FcPlus","size","btnextra","values","saveDeliveries","hover","handleEdit","actions","selectedColumns","align","render","rowData","lineNo","quantity","deliveryDate","revisedDate","FiTrash2","cursor","BiRevision","FcApproval","filter","eachElem","index","indexOf","tablehead","margin","dataintial","data","_useState5","length","map","item","reduce","prev","next","_useState6","setMaxQty","DeliveryForm","onDeliveryUpdate","Table","cols","DeliveryTable","upper","upperRow","margins","mg","pd","dg","uppertitle","borderBottomLeftRadius","borderBottomRightRadius","ttle","_useFetch","useFetch","get","post","response","loading","error","selectedItem","setDeliveries","_useState7","label","_useState8","prods","setProds","_useState9","_useState10","custs","setCusts","loadInitialOptions1","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","loadedprods","wrap","_context","api","sent","concat","_toConsumableArray","stop","loadProducts","_ref2","_callee2","customerId","_context2","_x","apply","arguments","template","heading","fields","contains","inpprops","minlength","maxlength","options","validationProps","format","CreateForm","rowwise","watchFields","validate","watchValues","errorMethods","console","log","onSubmit","saveFunction","onCancel","btButtons","DeliverySchedule","action","oldDeli","obj","showFormHandler","product","customer","productName","_Fragment","orderNo","internalPartCode","includes","orderStatus","color","FaIcons","BsIcons","AiOutlinePullRequest","FaDailymotion","showMonthlyFormHandler","showDailyFormHandler","showJOFormHandler","showProViewFormHandler","showDispatchFormHandler","striped","validation","selected","setSelected","message","monthNames","MonthlyPlanTable","exportTill","date","Date","startDate","getMonth","getFullYear","remarks","FiEdit","slice","stylesUpper","stylesUpperTwo","simplettl","_simplettl","display","justifyContent","simcard","_defineProperty","monthlyPlans","setMonthlyPlans","selectedPlan","setSelectedPlan","_useSelector","useSelector","state","alertProps","showAlert","alertMessage","alertVariant","_useSelector2","dispatch","useDispatch","loadInitialData","initialPlans","loadState","ok","saveDetails","monthlyPlan","monthlyapi","returnObject","monthPlanId","retValues","status","mplan","AlertHandler","loadStateContoller","alertContent","alertType","alertActions","showAlertHandler","SimpleCard","useUpperTwoStyle","uppertwo","TargetSchedule","MonthlyForm","DailyPlanTable","planDate","remarksForProd","dailyPlans","setDailyPlans","dailyPlan","dailyapi","dailyPlanId","dayplan","body","DaiilyPlanForm","vendors","setVendors","goingBefore","setGoingBefore","comingAfter","setComingAfter","loadInitialOptions","loadedVendors","processMaps","productId","Math","random","Remarks","approval","selectArray","ppmaps","getComingAfter","approvedQty","requestedQty","JobOrderTable","joDate","supplier","supplierName","goingBeforeDetails","process","processName","comingAfterDetails","joStatus","acceptedQty","disabled","stock","produced","oldEntry","setOldEntry","setLoadState","_ref","entry","prodEntryapi","joId","odr","order","intialdata","loadStateid","showForm","selectedForm","cusName","part","cost","showFormParams","setShowformparams","_useState11","Month","Year","Quantity","_useState12","setSelectedItem","_useState13","_useState14","setApproval","hideFormHandler","Modal","show","onHide","closeButton","ctitle","JobOrderForm","newState","ReceivalForm","InspectionForm","rows","tableCon","orderQty","invoiceDate","invoiceNo","vehicleDetails","table","dispatches","setDispatches","_useSelector3","modalProps","showModal","selectedData","_useSelector4","loadInitialdata","loadeddata","loadStateTime","toLocaleString","insEntryapi","dispatchId","loadStateController","form_header","yllw","fgStock","DispatchForm","DispatchTable","setDefValues","RevisionForm","alert","window","confirm","JSON","stringify","intialLoadFuntion","loadedData","schedule","del","delischedule","modalActions","hideModalHandler","centered","getValueByPath","path","_step2","keys","split","_iterator2","_createForOfIteratorHelper","s","n","done","undefined","err","e","f","seach","orders","setOrders","products","setProducts","customers","setCustomers","loadStateOrder","orderEntryProps","handleLoadChange","orderEntryActions","alterOrderSearchlHandler","alterOrderEntrylHandler","alterMonthlyPlanHandler","alterDailyPlanHandler","alterJobOrderHandler","alterProcessViewHandler","alterApprovalHandler","loadStateReducer","initialOrders","loadedcusts","orderSearch","searchDetails","orderapi","_ref3","_callee3","_context3","_x2","_ref4","_callee4","_context4","_x3","showModalHandler","OrderEntry","MonthlyPlan","DailyPlan","Dispatch","JobOrder","jobOrder","NewProcessView","processView","ProductionApp","searchQuery","setSearchQuery","filteredOrders","filterFields","query","toLowerCase","_step","_iterator","_getValueByPath","field","fieldValue","toString","filterData","SearchCard","OrderTable","onChange"],"sourceRoot":""}