{"version":3,"file":"static/js/4613.90e7a9f8.chunk.js","mappings":"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","sources":["webpack://costing/./src/Components/tables/table.module.css?920e","NewComponent/SearchBox.js","Components/tables/Table.js","webpack://costing/./src/UI/cards/SearchCard.module.css?35f0","UI/cards/SearchCard.js","pages/ProductionPages/ProductionEntry/DailyEntry/QualityForm.js","pages/ProductionPages/ProductionEntry/DailyEntry/QualityTable.js","pages/ProductionPages/ProductionEntry/ProdPlanTable.js","pages/ProductionPages/ProductionEntry/AddPlanForm.js","webpack://costing/./src/pages/ProductionPages/ProductionEntry/Dispatch/dispatch.module.css?ba01","pages/ProductionPages/ProductionEntry/Dispatch/DispatchForm.js","pages/ProductionPages/ProductionEntry/Dispatch/DispatchTable.js","pages/ProductionPages/ProductionEntry/Dispatch/Dispatch.js","pages/ProductionPages/ProductionEntry/DailyEntry/ProcessTable.js","pages/ProductionPages/ProductionEntry/DailyEntry/ProcessProdTable.js","pages/ProductionPages/ProductionEntry/DailyEntry/ProcessForm.js","pages/ProductionPages/ProductionEntry/DailyEntry/CastingTable.js","pages/ProductionPages/ProductionEntry/DailyEntry/MeltingOutward.js","pages/ProductionPages/ProductionEntry/DailyEntry/MeltTable.js","pages/ProductionPages/ProductionEntry/DailyEntry/MeltingForm.js","pages/ProductionPages/ProductionEntry/DailyEntry/DailyEntry.js","pages/ProductionPages/ProductionEntry/RawMaterial/RmData.js","pages/ProductionPages/ProductionEntry/RawMaterial/RmTable.js","webpack://costing/./src/pages/ProductionPages/ProductionEntry/RawMaterial/rmentry.module.css?688e","pages/ProductionPages/ProductionEntry/RawMaterial/RmForm.js","pages/ProductionPages/ProductionEntry/RawMaterial/SplitUpForm.js","pages/ProductionPages/ProductionEntry/RawMaterial/AlternateForm.js","pages/ProductionPages/ProductionEntry/RawMaterial/RawMaterial.js","pages/ProductionPages/ProductionEntry/PlanSearch.js","webpack://costing/./src/pages/ProductionPages/ProductionEntry/DailyEntry/dailyentry.module.css?6f61","webpack://costing/./src/pages/ProductionPages/ProductionEntry/productionentry.module.css?36a1"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"tableBody\":\"table_tableBody__NaJhZ\"};","import React from \"react\";\n\nconst SearchBox = ({ value, onChange }) => {\n  return (\n    <input\n      type=\"text\"\n      placeholder=\"Search...\"\n      value={value}\n      onChange={(e) => onChange(e.target.value)}\n    />\n  );\n};\n\nexport default SearchBox;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classes from \"./table.module.css\";\nimport { Col, Row } from \"react-bootstrap\";\nimport { IconContext } from \"react-icons/lib\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Box from \"@mui/material/Box\";\nimport MUITable from \"@mui/material/Table/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell, { tableCellClasses } from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableFooter from \"@mui/material/TableFooter\";\nimport TablePagination from \"@mui/material/TablePagination\";\nimport TableRow from \"@mui/material/TableRow\";\nimport { CheckBox } from \"@mui/icons-material\";\nimport Paper from \"@mui/material/Paper\";\nimport IconButton from \"@mui/material/IconButton\";\nimport FirstPageIcon from \"@mui/icons-material/FirstPage\";\nimport KeyboardArrowLeft from \"@mui/icons-material/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@mui/icons-material/KeyboardArrowRight\";\nimport LastPageIcon from \"@mui/icons-material/LastPage\";\nimport TableHead from \"@mui/material/TableHead\";\nimport { styled } from \"@mui/material/styles\";\nimport SearchBox from \"../../NewComponent/SearchBox\";\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n  [`&.${tableCellClasses.head}`]: {\n    backgroundColor: \"rgb(0, 92, 185);\",\n    color: theme.palette.common.white, \n    border: \"1px solid #B1BFC3\",\n  },\n  [`&.${tableCellClasses.body}`]: {\n    fontSize: 16,\n    backgroundColor: \"#f2f2f2\",\n    border: \"1px solid #B1BFC3\",\n  },\n}));\n\n\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n  \"&:nth-of-type(odd)\": {\n    backgroundColor: theme.palette.action.hover,\n    borderBottom: \"1px solid #B1BFC3\",\n  },\n  // hide last border\n  \"&:last-child td, &:last-child th\": {\n    border: 0,\n    border: \"1px solid #B1BFC3\",\n  },\n}));\n\nconst Table = ({\n  cols,\n  data,\n  rows,\n  loadDataonPageChange,\n  counts,\n  className,\n  includeCheck,\n  checkBoxEvent,\n  value, onChange,styles\n}) => {\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(rows ? rows : 10);\n  const [rowsOptions,setRowsOptions] = React.useState(rows<10 ? [5,10,25,50,100] : [10,25,50,100])\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - data.length) : 0;\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n  const dynamicStyles = typeof styles === \"undefined\" ? {} : styles;\n  const alignCenter = \"center\";\n  return (\n    <IconContext.Provider value={{ color: \"#6495ED\" }}>\n      <Row className={`${classes.tableContainer} ${className}`} style={{\n          ...dynamicStyles?.tablehead,\n          ...(dynamicStyles?.tablehead ? {} : { background: \"transparent\" }),\n        }}>\n        <Paper className={classes.tableContainer} >\n        <TableContainer\n            className={classes.tableStyles}\n            \n          >\n          <Row className={`justify-content-center align-items-center`} style={{ backgroundColor: 'white', padding:'0 10px 0 10px' }}>\n            {value !== undefined && onChange && (\n              <Col>\n                {/* Use the value and onChange props */}\n                <SearchBox value={value} onChange={onChange} />\n              </Col>\n            )}\n<Col>\n{ rows &&\n            <TablePagination sx={{padding:'0px',margin:'0px',\n            '.MuiTablePagination-selectLabel':{margin:'0px'},\n        '.MuiTablePagination-displayedRows':{margin:'0px'}\n    }}\n        rowsPerPageOptions={rowsOptions}\n        component=\"div\"\n        count={data.length}\n        rowsPerPage={rowsPerPage}\n        SelectProps={{\n            inputProps: {\n              'aria-label': 'rows per page'\n            },\n            native: true,\n          }}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}                                                                                                                                           \n        className = {classes.pagination}\n      />}\n</Col>\n            </Row> \n         \n          <div style={{\n          ...dynamicStyles?.table,\n          ...(dynamicStyles?.table ? {} : { background: \"transparent\" }),\n        }}className={classes.tableBody}>\n            <MUITable stickyHeader className={`table table-bordered table-striped ${classes.table}`}>\n               <TableHead>                <TableRow>\n                {includeCheck &&  <StyledTableCell align={alignCenter}>{<input type=\"checkbox\" />}</StyledTableCell>}\n                  <StyledTableCell align={alignCenter}>S.No</StyledTableCell>\n                  {cols.map((headerItem, index) => (\n                    <StyledTableCell key={index} align={alignCenter}>\n                      {headerItem.title}\n                    </StyledTableCell>\n                  ))}\n                </TableRow>\n              </TableHead> \n              {data && (\n                  <TableBody >\n                  {data\n                    .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((item, index) => (\n                      <StyledTableRow key={index++}>\n                      {includeCheck &&  <StyledTableCell align={alignCenter}>{<input type=\"checkbox\" onClick={e=>{checkBoxEvent(item,e.target.checked) }}/>}</StyledTableCell>}\n                        <StyledTableCell>{page * rowsPerPage+index+1}</StyledTableCell>\n                        {cols.map((col, key) => (\n                          <StyledTableCell\n                            key={key}\n                            align={col.align}\n                            className={col.hover && classes.hoverclass}\n                          >\n                            {col.render(item)}\n                          </StyledTableCell>\n                        ))}\n                      </StyledTableRow>\n                    ))}\n                </TableBody>\n              )}    \n            </MUITable> </div>\n            \n          </TableContainer>\n        </Paper>\n      </Row>\n      \n    </IconContext.Provider>\n  );\n};\n\nTable.propTypes = {\n  cols: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired,\n  bordered: PropTypes.bool,\n  hoverable: PropTypes.bool,\n  striped: PropTypes.bool,\n  isDark: PropTypes.bool,\n};\n\nTable.defaultProps = {\n  bordered: true,\n  hoverable: false,\n  striped: false,\n  isDark: false,\n};\n\nexport default Table;\n","// extracted by mini-css-extract-plugin\nexport default {\"card\":\"SearchCard_card__Dzf+K\",\"cardHeader\":\"SearchCard_cardHeader__QVtAN\",\"cardBody\":\"SearchCard_cardBody__Yd43+\",\"addButton\":\"SearchCard_addButton__iMTZ7\",\"icon\":\"SearchCard_icon__HgcvT\",\"container\":\"SearchCard_container__kjEtf\",\"heading\":\"SearchCard_heading__yWDof\",\"botton\":\"SearchCard_botton__UWqIi\",\"monthlyform\":\"SearchCard_monthlyform__Pvi+3\",\"title\":\"SearchCard_title__L9Ix5\",\"shRow\":\"SearchCard_shRow__0H9j4\",\"shCol\":\"SearchCard_shCol__5e-AT\",\"tableCon\":\"SearchCard_tableCon__W6ioV\",\"formCon\":\"SearchCard_formCon__A+Zsm\",\"btn\":\"SearchCard_btn__dv+Rc\",\"buttCon\":\"SearchCard_buttCon__l2vlz\",\"modal\":\"SearchCard_modal__Y+UBN\"};","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport {\n    Button,\n    Row,\n    Col,\n    Card\n    // FormControl\n  } from 'react-bootstrap';\nimport classes from './SearchCard.module.css'\nimport * as FaIcons from 'react-icons/fa';\n\nfunction SearchCard(props, styles) {\n  const dynamicStyles = typeof props.styles === \"undefined\" ? {} : props.styles;\n  return (\n    <Card\n      className={classes.card}\n      style={{\n        ...dynamicStyles.search,\n        ...(dynamicStyles.search ? {} : { background: \"transparent\" }),\n      }}\n    >\n    <Card.Header className={classes.cardHeader}>\n    <Row >\n    <Col xs={12} md={!props.bottonShow ? { span: 5, offset: 3 } : { span: 12 }} className='d-flex justify-content-center'><h4>{props.title}</h4></Col>\n        <Col xs={12} md={4} className='d-flex justify-content-end'>\n            {!props.bottonShow && <Button variant=\"primary\" className={classes.addButton} onClick={props.onHeaderClick}>\n              {props.buttonName}</Button>}\n        </Col>\n      </Row>\n   </Card.Header>\n    <Card.Body className={classes.cardBody}>\n        {props.children}\n    </Card.Body>\n  </Card>\n  )\n}\n\nexport default SearchCard\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport CreateForm from \"../../../../Components/Forms/CreateForm\";\nimport { Row, Col, Card } from \"react-bootstrap\";\nimport classes from \"./dailyentry.module.css\";\nimport api from \"../../../../Api\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport useFetch, { Provider } from \"use-http\";\nimport { alertActions } from \"../../../../store/alert-slice\";\nimport QualityTable from \"./QualityTable\";\nimport SimpleCard from \"../../../../UI/cards/SimpleCard\";\nimport Table from \"../../../../Components/tables/Table\";\n\nfunction QualityForm(props) {\n  let rowWiseFields = 3;\n  const dispatch = useDispatch();\n  const [defValues, setDefValues] = useState({});\n  const [loadState, setLoadState] = useState(Math.random());\n  const [defects,setDefects] =useState([{\"value\":\"\",\"label\":\"Select\"}]);\n  const [process,setProcess]=useState([]);\n\n  const [showAlert, alertMessage, alertVariant] = useSelector((state) => [\n    state.alertProps.showAlert,\n    state.alertProps.alertMessage,\n    state.alertProps.alertVariant,\n  ]);\n  const { get, post, response, loading, error } = useFetch({ data: [] });\n  let [oldEntry, setOldEntry] = useState();\n  const [stockDisplay, setStockDisplay] = useState({ stock: 0, produced: 0 });\n\n  const AlertHandler = (alertContent, alertType) => {\n    dispatch(\n      alertActions.showAlertHandler({\n        showAlert: !showAlert,\n        alertMessage: alertContent,\n        alertVariant: alertType,\n      })\n    );\n  };\n\n  const loadInitialData = useCallback(async () => {\n    const intialdata = await post(api + \"/inspectionEntry/latestEntry\", {\n      orderId: props.orderId,\n      prodProcMapId: props.selectedItem.prodProcMapId,\n      loadState: loadState,\n    });\n    const loadedProcess = await post(api+\"/ppMap/loadOptionsBefore\",{id:props.selectedItem.prodProcMapId})\n    setProcess([...[{\"value\":\"\",\"label\":\"Select\"}],...loadedProcess])\n    console.log(intialdata)\n    //console.log(props.selectedItem.prodProcMapId)\n\n    if (response.ok && intialdata.retValues.latestEntries)\n      setOldEntry([intialdata.retValues.latestEntries]);\n    setStockDisplay((oldStock) => ({\n      ...oldStock,\n      stock: intialdata.retValues.prodStock.stockQuantity ? intialdata.retValues.prodStock.stockQuantity : 0,\n      produced: intialdata.retValues.prodStock._producedQuantity ? intialdata.retValues.prodStock._producedQuantity : 0,\n    }));\n  }, [post,response]);\n   const saveDetails = async (entry) => {\n    //  procMaps\n    const insEntryapi = entry.insEntryId\n      ? \"/inspectionEntry/update\"\n      : \"/inspectionEntry/create\";\n    console.log(insEntryapi);\n    const returnObject = await post(api + insEntryapi, entry);\n    console.log(returnObject);\n    if (returnObject.retValues.status == 1) {\n      if (entry.insEntryId) {\n        setOldEntry([returnObject.retValues.insEntry]);\n        setLoadState(Math.random());\n        AlertHandler(returnObject.retValues.message, \"success\");\n      } else if (returnObject.retValues.insEntry.insEntryId > 0) {\n        setOldEntry([returnObject.retValues.insEntry]);\n        AlertHandler(returnObject.retValues.message, \"success\");\n        setLoadState(Math.random());\n      }\n    } else {\n      AlertHandler(returnObject.retValues.message, \"danger\");\n    }\n  };\n\n  const searchQuality=()=>{\n    \n  }\n\n  useEffect(() => {\n    loadInitialData();\n  }, [loadState]); // componentDidMount\n\n  const [selectedEntry,setSelectedEntry] = useState();\n  const handleEdit = (item, action) => () => {\n    if (action === \"edit\") {\n      setSelectedEntry(item);\n    \n    }\n  };\n  const loadInitialDefects = useCallback(async () => {\n    // const { ok } = response // BAD, DO NOT DO THIS\n    const loadeddefects = await get(api+\"/defect/loadOptions\");\n    setDefects([...defects,...loadeddefects]);\n    console.log({...props.selectedItem})\n  }, [get, response]);\n\n  useEffect(() => { loadInitialDefects() }, [])\n\n  const form_header = (\n    <>\n      <Card body className={classes.title}>\n        <Row>\n          <Col\n            style={{\n              backgroundColor: \"grey\",\n              justifyContent: \"left\",\n              borderRadius: \"5%\",\n            }}\n            md={2}\n          >\n            Stock Qty <br />\n            {stockDisplay.stock}\n          </Col>\n          <Col md={{ span: 6, offset: 1 }}>\n            {\" \"}\n            <h4>\n              {props.selectedItem.process.proSubCat === \"Quality\"\n                ? \"Inspection\"\n                : `Line Inspection ${ props.selectedItem.process.processName}`}\n                {\" \"} - {props.productName}\n            </h4>{\" \"}\n          </Col>\n        </Row>\n      </Card>\n    </>\n  );\n  //<Col style={{backgroundColor:\"grey\",justifyContent:'right',borderRadius:\"5%\"}} md={{ span: 2, offset: 1}}>Completed Qty <br/>{stockDisplay.produced}</Col>\n\n  let template = {\n    fields: [\n      {\n        title: \"Date\",\n        type: \"date\",\n        name: \"entryDate\",\n        contains: \"date\",\n        validation: \"Date is Required\",\n        inpprops: {\n          format: \"dd/mm/yy\",\n        },\n      },\n      {\n        title: \"Shift\",\n        type: \"select\",\n        name: \"shift\",\n        validationProps: \"Please select Shift\",\n        contains: \"Select\",\n        options: [\n          { value: \"\", label: \"Select\" },\n          { value: \"Shift_1\", label: \"Shift 1\" },\n          { value: \"Shift_2\", label: \"Shift 2\" },\n          { value: \"Shift_3\", label: \"Shift 3\" },\n        ],\n      },\n      {\n        title: \"Inspected Qty\",\n        type: \"number\",\n        name: \"insQuantity\",\n        contains: \"number\",\n        inpprops: {\n          min: 1,\n          step: 1,\n          max :stockDisplay.stock\n        },\n      },{\n        title: \"Rework Qty\",\n        type: \"number\",\n        name: \"reworkQuantity\",\n        contains: \"number\",\n        inpprops: {\n          min: 0,\n          step: 1,\n        },\n      },\n      {\n        title: \"Rework Serial No\",\n        type: \"textarea\",\n        name: \"reworkSerialNo\",\n        contains: \"textarea\",\n        inpprops: {\n          maxlength: 255,\n          md: 4,\n        },\n      },\n      {\n        title: \"Rework Process\",\n        type: \"select\",\n        name: \"reworkMapId\",\n        validationProps: \"Please select Process\",\n        contains: \"Select\",\n        options: process,\n      },\n      {\n        title: \"Remarks\",\n        type: \"textarea\",\n        name: \"remarks\",\n        contains: \"textarea\",\n        inpprops: {\n          maxlength: 128,\n          md: 4,\n        },\n      },\n      {\n        title: \"Rejected Qty\",\n        type: \"number\",\n        name: \"rejectedQuantity\",\n        contains: \"number\",\n        inpprops: {\n          min: 0,\n          step: 1,\n        },\n      },\n      {\n        title: \"Defect Type\",\n        type: \"select\",\n        name: \"defectId\",\n        contains: \"Select\",\n        options: defects,\n      },\n      {\n        title: \"Rejected Serial No\",\n        type: \"textarea\",\n        name: \"rejectedSerialNo\",\n        contains: \"textarea\",\n        inpprops: {\n          maxlength: 255,\n          md: 4,\n        },\n      },\n      \n      \n      {\n        type: \"hidden\",\n        name: \"orderId\",\n        contains: \"number\",\n        value: props.orderId,\n      },\n      {\n        type: \"hidden\",\n        name: \"prodProcMapId\",\n        contains: \"number\",\n        value: props.selectedItem.prodProcMapId,\n      },\n      {\n        type: \"hidden\",\n        name: \"lineInspection\",\n        contains: \"number\",\n        value:\n          props.selectedItem.process.proSubCat === \"Quality\" ? \"No\" : \"Yes\",\n      }, {\n        type: \"hidden\",\n        name: \"isReworkEntry\",\n        contains: \"number\",\n        value:\"No\",\n         },\n    ],\n  };\n\n  function onSubmit(values) {\n    saveDetails(values);\n  }\n\n  return (\n    <>\n      {form_header}\n      <CreateForm\n        template={template}\n        watchFields={[\"firstname\"]}\n        rowwise={rowWiseFields}\n        validate={validate}\n        onSubmit={onSubmit}\n        onCancel={props.onCancel}\n        buttonName=\"Add\"\n        defaultValues={selectedEntry}\n      ></CreateForm>\n\n      <SimpleCard>\n        {<Table cols={QualityTable(handleEdit)} data={oldEntry}></Table>}\n      </SimpleCard>\n    </>\n  );\n}\n\nfunction validate(watchValues, errorMethods) {\n  let { errors, setError, clearErrors } = errorMethods;\n\n  // Firstname validation\n  if (watchValues[\"firstname\"] === \"Admin\") {\n    if (!errors[\"firstname\"]) {\n      setError(\"firstname\", {\n        type: \"manual\",\n        message: \"You cannot use this first name\",\n      });\n    }\n  } else {\n    if (errors[\"firstname\"] && errors[\"firstname\"][\"type\"] === \"manual\") {\n      clearErrors(\"firstname\");\n    }\n  }\n}\n\nexport default QualityForm;\n","import React from 'react';\nimport * as BsIcons from 'react-icons/bs'\nimport * as FaIcons from 'react-icons/fa'\nimport {AiOutlinePullRequest,AiOutlineReconciliation} from 'react-icons/ai'\nimport {FiEdit} from 'react-icons/fi'\n\n\n// This is the table constant/settings which needed to render table elements\n\n\nexport const QualityTable = (showFormHandler) => {\n  return [\n    {\n        title: 'Entry Date',\n        align:'Center',\n        render: rowData => {\n          return <span>{rowData.entryDate}</span>;\n        },\n      },\n      {\n        title: 'Shift',\n        align:'Center',\n        render: rowData => {\n          return <span>{rowData.shift}</span>;\n        },\n      },\n      {\n        title: 'Quantity Inspected',\n        align:'center',\n        render: rowData => {\n          return <span>{rowData.insQuantity}</span>;\n        },\n      },{\n        title: 'Rejected',\n        align:'center',\n        render: rowData => {\n          return <span>{rowData.rejectedQuantity}</span>;\n        },\n      },{\n        title: 'Rework',\n        align:'center',\n        render: rowData => {\n          return <span>{rowData.reworkQuantity}</span>;\n        },\n      },{\n        title: 'Remarks',\n        align:'center',\n        render: rowData => {\n          return <span>{rowData.remarks}</span>;\n        },\n      },{\n        title: 'Edit',\n        align:'center',\n        render: rowData => {\n          return <FiEdit style={{cursor:\"pointer\"}} onClick={showFormHandler(rowData,\"edit\")}></FiEdit>\n        },\n      }\n  ];\n};\n\n\nexport default QualityTable","import React from 'react';\nimport * as BsIcons from 'react-icons/bs'\nimport {FaDailymotion} from 'react-icons/fa'\nimport {BiImport} from 'react-icons/bi'\n\n\n// This is the table constant/settings which needed to render table elements\n\nexport const ProdPlanTable = (showFormHandler,actions,selectedColumns) => {\n  return [\n\n    {\n      title: 'Order No',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.order.orderNo}</span>;\n      \n      },\n    },{\n      title: 'Product Name',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.order.product.productName}</span>;\n      \n      },\n    },\n    {\n      title: 'Customer',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.order.product.customer.name}</span>;\n      },\n    },\n    {\n      title: 'Target Qty',\n      align:'Center',\n      render: rowData => {\n        return <span>{rowData.quantity}</span>;\n      },\n    },\n    {\n      title: 'Remarks',\n      align:'left',\n      render: rowData => {\n        return <span>{rowData.remarksForProd}</span>;\n      },\n    },\n    // {\n    //   title: 'RM Request',\n    //   align:'center',\n    //   render: rowData => {\n    //     return <BiImport style={{cursor:\"pointer\"}} onClick={showFormHandler(rowData,actions[1])}></BiImport>\n    //   },\n    // },\n    {\n      title: 'Production Entry',\n      align:'center',\n      render: rowData => {\n        return <BsIcons.BsCalendar2Month style={{cursor:\"pointer\"}} onClick={showFormHandler(rowData,actions[2])}></BsIcons.BsCalendar2Month>\n      },\n    },{\n      title: 'Dispatch',\n      align:'center',\n      render: rowData => {\n        return <FaDailymotion style={{cursor:\"pointer\"}} onClick={showFormHandler(rowData,actions[3])}></FaDailymotion>\n      },\n    },\n    {\n      title: 'Inspection Entry',\n      align:'center',\n      render: rowData => {\n        return <BsIcons.BsCalendar2Month style={{cursor:\"pointer\"}} onClick={showFormHandler(rowData,actions[4])}></BsIcons.BsCalendar2Month>\n      },\n    },\n    \n   \n  ].filter(function (eachElem, index) {\n    return selectedColumns.indexOf(index) == -1\n});\n};\n\n\nexport default ProdPlanTable","import React from 'react'\nimport CreateForm from '../../../Components/Forms/CreateForm'\n\nconst rowWiseFields=2\nfunction AddPlanForm(props) {\n    const template = {\n        heading: \"Add Today's Plan\",\n        fields: [\n             {\n                 title: 'Date',\n                 type: 'date',\n                 name: 'date',\n                 contains:\"date\",\n                 validation:\"Date is Required\",\n                 inpprops:{\n                   format:\"mm/yy\"\n                 },\n           },\n           {\n            title: 'Product',\n            type: 'select',\n            name: 'product',\n            contains: 'Select',\n            options:[\n            {value:\"\", label:'Select'},\n            {value:1, label:'Rft4243543'},\n            {value:2, label:'PRT43543543'},\n            {value:3, label:'IYT324432543'}\n          ]\n        },\n      {\n        title: 'Customer',\n        type: 'select',\n        name: 'outsouredTo',\n        contains: 'Select',\n        options:[\n        {value:\"\", label:'Select'},\n        {value:1, label:'DRDO'},\n        {value:2, label:'ISRO'},\n        {value:3, label:'BHEL'}\n      ]\n    },\n           {\n             title: 'Quantity',\n             type: 'number',\n             name: 'Quantity',\n             contains:\"number\",\n             validation:\"Quantity is Required\",\n             inpprops:{\n                 min:1,\n                 step:1\n             },\n            \n   \n       },\n       {\n           title: 'Remarks',\n           type: 'textarea',\n           name: 'remarks',\n           contains:\"textarea\",\n           inpprops:{\n             maxlength:128,\n             md:6\n           },\n            },\n           ]\n       }\n      \n      const buttonName= \"Add\"\n  return (\n     <CreateForm  template={template} \n    rowwise={rowWiseFields}\n     validate={validate}\n     onSubmit={onSubmit} \n     onCancel={props.onCancel}\n     buttonName={buttonName}>\n     </CreateForm>\n   \n   )\n}\n\nfunction onSubmit(values) {\n    console.log(values);\n  }\n  \n  function validate(watchValues, errorMethods) {\n    let { errors, setError, clearErrors } = errorMethods;\n  \n    // Firstname validation\n    if(watchValues['firstname'] === 'Admin'){\n        if(!errors['firstname']){\n            setError('firstname', {\n                type: 'manual',\n                message: 'You cannot use this first name'\n            })\n        }\n    }else{\n        if(errors['firstname'] && errors['firstname']['type'] === 'manual'){\n            clearErrors('firstname');\n        }\n    }\n  }\n  \n\n  export default AddPlanForm\n","// extracted by mini-css-extract-plugin\nexport default {\"monthlyform\":\"dispatch_monthlyform__NShYr\",\"title\":\"dispatch_title__LTuQt\",\"shRow\":\"dispatch_shRow__dpPlf\",\"shCol\":\"dispatch_shCol__bLf4j\",\"tableCon\":\"dispatch_tableCon__IQ93q\",\"formCon\":\"dispatch_formCon__IClZq\"};","import React from 'react'\nimport CreateForm from '../../../../Components/Forms/CreateForm'\n\nconst rowWiseFields=2\nfunction DispatchForm(props) {\n    const template = {\n        fields: [\n             {\n                 title: 'Date',\n                 type: 'date',\n                 name: 'invoiceDate',\n                 contains:\"date\",\n                 validation:\"Date is Required\",\n                 inpprops:{\n                   format:\"dd/mm/yy\"\n                 },\n           },\n           {\n             title: 'Quantity',\n             type: 'number',\n             name: 'quantity',\n             contains:\"number\",\n             inpprops:{\n                 min:1,\n                 step:1,\n                 max:props.orderQty\n             },\n            \n   \n       },\n       {\n        title: 'Dc No',\n        type: 'text',\n        name: 'invoiceNo',\n        contains:\"text\",\n        inpprops:{\n            minlength:3,\n            maxlength:80\n        },\n       \n\n  },{\n    title: 'Vechicle No',\n    type: 'text',\n    name: 'vehicleDetails',\n    contains:\"text\",\n    inpprops:{\n        minlength:3,\n        maxlength:80\n    },\n   \n\n},\n       {\n           title: 'Remarks',\n           type: 'textarea',\n           name: 'remarks',\n           contains:\"textarea\",\n           inpprops:{\n             maxlength:128,\n             md:6\n           },\n            },{\n                type: \"hidden\",\n                name: \"orderId\",\n                contains: \"number\",\n                value: props.orderId,\n              }\n\n           ]\n       }\n      \n\n       function onSubmit(values) {\n        props.saveFunction(values);\n      }\n      const buttonName= \"Add\"\n  return (\n     <CreateForm  template={template} \n    rowwise={rowWiseFields}\n     validate={validate}\n     onSubmit={onSubmit} \n     onCancel={props.onCancel}\n     buttonName={buttonName}\n     defaultValues={props.selected}>\n     </CreateForm>\n   \n   )\n}\n\n\n  \n  function validate(watchValues, errorMethods) {\n    let { errors, setError, clearErrors } = errorMethods;\n  \n    // Firstname validation\n    if(watchValues['firstname'] === 'Admin'){\n        if(!errors['firstname']){\n            setError('firstname', {\n                type: 'manual',\n                message: 'You cannot use this first name'\n            })\n        }\n    }else{\n        if(errors['firstname'] && errors['firstname']['type'] === 'manual'){\n            clearErrors('firstname');\n        }\n    }\n  }\n  \n\n  export default DispatchForm\n","import React from 'react';\nimport * as BsIcons from 'react-icons/bs'\nimport * as FaIcons from 'react-icons/fa'\nimport {AiOutlinePullRequest,AiOutlineReconciliation} from 'react-icons/ai'\nimport {FiEdit} from 'react-icons/fi'\n\n\n// This is the table constant/settings which needed to render table elements\n\n\nexport const DispatchTable = (showFormHandler) => {\n  return [\n    {\n      title: 'Dispatch Date',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.invoiceDate}</span>;\n      },\n    },\n    {\n      title: 'Quantity',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.quantity}</span>;\n      \n      },\n    },{\n      title: 'Invoice Details',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.invoiceNo}</span>;\n      },\n    },\n    {\n      title: 'Vechile Details',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.vehicleDetails}</span>;\n      },\n    },{\n        title: 'Remarks',\n        align:'center',\n        render: rowData => {\n          return <span>{rowData.remarks}</span>;\n        },\n      },{\n        title: 'Edit',\n        align:'center',\n        render: rowData => {\n          return <FiEdit style={{cursor:\"pointer\"}} onClick={showFormHandler(rowData,\"edit\")}></FiEdit>\n        },\n      }\n   \n  ];\n};\n\n\nexport default DispatchTable","import React, { useState, useCallback, useEffect } from \"react\";\nimport classes from \"./dispatch.module.css\";\nimport SimpleCard from \"../../../../UI/cards/SimpleCard\";\nimport { Card } from \"react-bootstrap\";\nimport DispatchForm from \"./DispatchForm\";\nimport { Dispatchdata } from \"./Dispatchdata\";\nimport DispatchTable from \"./DispatchTable\";\nimport Table from \"../../../../Components/tables/Table\";\nimport api from \"../../../../Api\";\nimport useFetch, { Provider } from \"use-http\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { modalActions } from \"../../../../store/modal-Slice\";\nimport { alertActions } from \"../../../../store/alert-slice\";\nimport { Col, Row } from \"react-bootstrap\";\n\nfunction Dispatch(props) {\n  const { get, post, response, loading, error } = useFetch({ data: [] });\n  const [dispatches, setDispatches] = useState([]);\n  const [showAlert, alertMessage, alertVariant] = useSelector((state) => [\n    state.alertProps.showAlert,\n    state.alertProps.alertMessage,\n    state.alertProps.alertVariant,\n  ]);\n\n  const [showModal, selectedForm, selectedData] = useSelector((state) => [\n    state.modalProps.showModal,\n    state.modalProps.selectedForm,\n    state.modalProps.selectedData,\n  ]);\n  const [loadState, setLoadState] = useState(Math.random());\n\n  const dispatch = useDispatch();\n  const AlertHandler = (alertContent, alertType) => {\n    dispatch(\n      alertActions.showAlertHandler({\n        showAlert: !showAlert,\n        alertMessage: alertContent,\n        alertVariant: alertType,\n      })\n    );\n  };\n\n  const loadInitialdata = useCallback(async () => {\n    const { ok } = response; // BAD, DO NOT DO THIS\n    const prodId = props.selectedItem.product.productId;\n    const loadeddata = await post(api + \"/dispatchEntry/dispatchEntrys\", {\n      orderId: props.selectedItem.orderId,\n      loadStateTime: Date().toLocaleString(),\n    });\n    loadeddata ? setDispatches(loadeddata) : setDispatches([]);\n    //console.log({ ...props.selectedItem.productId });\n  }, [get, response]);\n\n  useEffect(() => {\n    loadInitialdata();\n  }, [loadState]);\n\n  const saveDetails = async (entry) => {\n    //  procMaps\n    const insEntryapi = entry.dispatchId\n      ? \"/dispatchEntry/update\"\n      : \"/dispatchEntry/create\";\n    console.log(insEntryapi);\n    const returnObject = await post(api + insEntryapi, entry);\n    console.log(returnObject);\n    if (returnObject.retValues.status == 1) {\n      if (entry.dispatchId) {\n        setDispatches([returnObject.retValues.dispatch]);\n        setLoadState(Math.random());\n        props.loadStateController()\n        AlertHandler(returnObject.retValues.message, \"success\");\n      } else if (returnObject.retValues.dispatch.dispatchId > 0) {\n        setDispatches([returnObject.retValues.dispatch]);\n        AlertHandler(returnObject.retValues.message, \"success\");\n        setLoadState(Math.random());\n        \n        props.loadStateController()\n      }\n    } else {\n      AlertHandler(returnObject.retValues.message, \"danger\");\n    }\n  };\n  const [selectedItem, setSelectedItem] = useState({\n    id: \"\",\n    Month: \"\",\n    Year: \"\",\n    Remarks: \"\",\n    Quantity: \"\",\n  });\n\n  const form_header = (\n    <>\n      <Card body className={classes.title}>\n        <Row>\n          <Col\n            style={{\n              backgroundColor: \"grey\",\n              justifyContent: \"left\",\n              borderRadius: \"5%\",\n            }}\n            md={2}\n          >\n            Stock Qty <br />\n            {props.selectedItem.fgStock}\n          </Col>\n          <Col md={{ span: 6, offset: 1 }}>\n            {\" \"}\n            <h4>\n              Dispatch Details - {props.selectedItem.product.productName}\n            </h4>{\" \"}\n          </Col>\n        </Row>\n      </Card>\n    </>\n  );\n\n  const handleEdit = (item) => () => {\n    setSelectedItem({ ...selectedItem, ...item });\n    // alert(JSON.stringify(item))\n  };\n  return (\n    <SimpleCard>\n      {form_header}\n      <SimpleCard>\n        <DispatchForm\n          orderQty = {props.selectedItem.fgStock}\n          orderId={props.selectedItem.orderId}\n          selected={selectedItem}\n          saveFunction={saveDetails}\n          onCancel={props.onCancel}           \n        ></DispatchForm>\n        <Table\n          data={dispatches}\n          cols={DispatchTable(handleEdit)}\n          className={classes.tableCon}\n        ></Table>\n      </SimpleCard>\n    </SimpleCard>\n  );\n}\n\nexport default Dispatch;\n","import React from 'react';\nimport * as BsIcons from 'react-icons/bs'\nimport * as FaIcons from 'react-icons/fa'\nimport {AiOutlinePullRequest,AiOutlineReconciliation} from 'react-icons/ai'\n\n// This is the table constant/settings which needed to render table elements\n\n\nexport const ProcessTable = (showFormHandler,actions,selectedColumns) => {\n  return [\n    {\n      title: 'Process Name',\n      align:'left',\n      render: rowData => {\n        return <span>{rowData.process.processName}</span>;\n      },\n    },{\n        title: 'Production Entry',\n        align:'center',\n        render: rowData => {\n          return (\n         <> {rowData.process.proSubCat===\"Quality\" ?\"NA\" :<BsIcons.BsCalendar2Month style={{cursor:\"pointer\"}} onClick={showFormHandler(rowData)}></BsIcons.BsCalendar2Month>}\n      </> ) },\n      },{\n        title: 'Inspection Entry',\n        align:'center',\n        render: rowData => {\n          return <BsIcons.BsCalendar2Month style={{cursor:\"pointer\"}} onClick={showFormHandler(rowData,actions[0])}></BsIcons.BsCalendar2Month>\n        },\n      },{\n        title: 'Rework Entry',\n        align:'center',\n        render: rowData => {\n          return( \n          <>{rowData.process.proSubCat===\"Quality\" ? \"NA\" :<BsIcons.BsCalendar2Month style={{cursor:\"pointer\"}} onClick={showFormHandler(rowData,actions[1])}></BsIcons.BsCalendar2Month>}\n          </>)\n          },\n      },\n  ].filter(function (eachElem, index) {\n    return selectedColumns.indexOf(index) == -1\n});;\n};\n\n\nexport default ProcessTable","import React from 'react';\nimport * as BsIcons from 'react-icons/bs'\nimport * as FaIcons from 'react-icons/fa'\nimport {AiOutlinePullRequest,AiOutlineReconciliation} from 'react-icons/ai'\n\nimport {FiEdit} from 'react-icons/fi'\n// This is the table constant/settings which needed to render table elements\n\n\nexport const ProcessProdTable = (showFormHandler) => {\n  return [\n    {\n        title: 'Entry Date',\n        align:'Center',\n        render: rowData => {\n          return <span>{rowData.entryDate}</span>;\n        },\n      },\n      {\n        title: 'Shift',\n        align:'Center',\n        render: rowData => {\n          return <span>{rowData.shift}</span>;\n        },\n      },\n      {\n        title: 'Quantity',\n        align:'center',\n        render: rowData => {\n          return <span>{rowData.quantity}</span>;\n        },\n      },{\n        title: 'Edit',\n        align:'center',\n        render: rowData => {\n          return <FiEdit style={{cursor:\"pointer\"}} onClick={showFormHandler(rowData,\"edit\")}></FiEdit>\n        },\n      }\n  ];\n};\n\n\nexport default ProcessProdTable","import React, { useState, useCallback, useEffect } from \"react\";\nimport CreateForm from \"../../../../Components/Forms/CreateForm\";\nimport { Col, Row, Card } from \"react-bootstrap\";\nimport classes from \"./dailyentry.module.css\";\nimport api from \"../../../../Api\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport useFetch, { Provider } from \"use-http\";\nimport { alertActions } from \"../../../../store/alert-slice\";\nimport ProcessProdTable from \"./ProcessProdTable\";\nimport SimpleCard from \"../../../../UI/cards/SimpleCard\";\nimport Table from \"../../../../Components/tables/Table\";\n\nfunction ProcessForm(props) {\n  let rowWiseFields = 3;\n  const dispatch = useDispatch();\n  const [defValues, setDefValues] = useState({});\n  const [stockDisplay, setStockDisplay] = useState({ stock: 0, produced: 0 });\n  const [loadState,setLoadState] = useState(Math.random());\n  const [showAlert, alertMessage, alertVariant] = useSelector((state) => [\n    state.alertProps.showAlert,\n    state.alertProps.alertMessage,\n    state.alertProps.alertVariant,\n  ]);\n  const { get, post, response, loading, error } = useFetch({ data: [] });\n\n  let [oldEntry, setOldEntry] = useState();\n  const form_header = (\n    <>\n      <Card body className={classes.title}>\n        <Row>\n          <Col\n            style={{\n              backgroundColor: \"grey\",\n              justifyContent: \"left\",\n              borderRadius: \"5%\",\n            }}\n            md={2}\n          >\n            Available Qty <br /> {stockDisplay.stock}\n          </Col>\n          <Col md={{ span: 6, offset: 1 }}>\n            {\" \"}\n            <h4>{`${props.selectedItem.process.processName} -`} {props.productName}</h4>{\" \"}\n          </Col>\n          <Col\n            style={{\n              backgroundColor: \"grey\",\n              justifyContent: \"right\",\n              borderRadius: \"5%\",\n            }}\n            md={{ span: 2, offset: 1 }}\n          >\n            Produced Qty\n            <br /> {stockDisplay.produced}\n          </Col>\n        </Row>\n      </Card>\n    </>\n  );\n\n  const loadInitialData = useCallback(async () => {\n    const intialdata = await post(api + \"/productionEntry/latestEntry\", {\n      orderId: props.orderId,\n      prodProcMapId: props.selectedItem.prodProcMapId,\n      loadState: loadState,\n    });\n    console.log(intialdata)\n    if (response.ok ) {\n      if(intialdata.retValues.latestEntries){\n        setOldEntry([intialdata.retValues.latestEntries]);\n      \n      }\n      setStockDisplay((oldStock) => ({\n        ...oldStock,\n        stock: intialdata.retValues.prodStock.stockQuantity ? intialdata.retValues.prodStock.stockQuantity : 0, \n        produced: intialdata.retValues.prodStock.producedQuantity ? intialdata.retValues.prodStock.producedQuantity : 0,\n      }));\n    }\n  }, [post, response,loadState]);\n\n  useEffect(() => {\n    loadInitialData();\n  }, [loadState]); // componentDidMount\n\n  const AlertHandler = (alertContent, alertType) => {\n    dispatch(\n      alertActions.showAlertHandler({\n        showAlert: !showAlert,\n        alertMessage: alertContent,\n        alertVariant: alertType,\n      })\n    );\n  };\n\n  const saveDetails = async (entry) => {\n    //  procMaps\n    const prodEntryapi = entry.entryId\n      ? \"/productionEntry/update\"\n      : \"/productionEntry/create\";\n    console.log(prodEntryapi);\n    const returnObject = await post(api + prodEntryapi, entry);\n    console.log(returnObject);\n    if (returnObject.retValues.status == 1) {\n      if (entry.entryId) {\n        setOldEntry((oldArray) => [returnObject.retValues.prodEntry]);\n        AlertHandler(returnObject.retValues.message, \"success\");\n        setLoadState(Math.random())\n        props.loadStateController()\n      } else if (returnObject.retValues.prodEntry.entryId > 0) {\n        setOldEntry((oldArray) => [returnObject.retValues.prodEntry]);\n        AlertHandler(returnObject.retValues.message, \"success\");\n        setLoadState(Math.random())\n        props.loadStateController()\n      }\n    } else {\n      AlertHandler(returnObject.retValues.message, \"danger\");\n      loadInitialData();\n    }\n  };\n\n  let template = {\n    fields: [\n      {\n        title: \"Date\",\n        type: \"date\",\n        name: \"entryDate\",\n        contains: \"date\",\n        validation: \"Date is Required\",\n        inpprops: {\n          format: \"dd/mm/yy\",\n        },\n      },\n      {\n        title: \"Shift\",\n        type: \"select\",\n        name: \"shift\",\n        validationProps: \"Please select Shift\",\n        contains: \"Select\",\n        options: [\n          { value: \"\", label: \"Select\" },\n          { value: \"Shift_A\", label: \"Shift A\" },\n          { value: \"Shift_B\", label: \"Shift B\" },\n          { value: \"Shift_C\", label: \"Shift C\" },\n        ],\n      },\n      {\n        title: \"Production Qty\",\n        type: \"number\",\n        name: \"quantity\",\n        contains: \"number\",\n        inpprops: {\n          min: 1,\n          step: 1,\n          max: stockDisplay.stock\n        },\n      },\n      {\n        type: \"hidden\",\n        name: \"orderId\",\n        contains: \"number\",\n        value: props.orderId,\n      },\n      {\n        type: \"hidden\",\n        name: \"prodProcMapId\",\n        contains: \"number\",\n        value: props.selectedItem.prodProcMapId,\n      },\n    ],\n  };\n\n  function onSubmit(values) {\n    saveDetails(values);\n  }\n  const [selectedEntry,setSelectedEntry] = useState();\n  const handleEdit = (item, action) => () => {\n    if (action === \"edit\") {\n      setSelectedEntry(item);\n    \n    }\n  };\n\n  return (\n    <>\n      {form_header}\n      <CreateForm\n        template={template}\n        // watchFields={['firstname','password']}\n        rowwise={rowWiseFields}\n        validate={validate}\n        onSubmit={onSubmit}\n        onCancel={props.onCancel}\n        buttonName=\"Add\"\n        defaultValues={selectedEntry}\n      ></CreateForm>\n      <SimpleCard>\n        <Table cols={ProcessProdTable(handleEdit)} data={oldEntry}></Table>\n      </SimpleCard>\n    </>\n  );\n}\n\nfunction validate(watchValues, errorMethods) {\n  let { errors, setError, clearErrors } = errorMethods;\n\n  // Firstname validation\n  if (watchValues[\"firstname\"] === \"Admin\") {\n    if (!errors[\"firstname\"]) {\n      setError(\"firstname\", {\n        type: \"manual\",\n        message: \"You cannot use this first name\",\n      });\n    }\n  } else {\n    if (errors[\"firstname\"] && errors[\"firstname\"][\"type\"] === \"manual\") {\n      clearErrors(\"firstname\");\n    }\n  }\n}\n\nexport default ProcessForm;\n","import React from 'react';\nimport * as BsIcons from 'react-icons/bs'\nimport * as FaIcons from 'react-icons/fa'\nimport {AiOutlinePullRequest,AiOutlineReconciliation} from 'react-icons/ai'\nimport {FiEdit} from 'react-icons/fi'\n// This is the table constant/settings which needed to render table elements\n\n\nexport const CastingTable = (showFormHandler) => {\n  return [\n    {\n        title: 'Entry Date',\n        align:'Center',\n        render: rowData => {\n          return <span>{rowData.entryDate}</span>;\n        },\n      },\n      {\n        title: 'Shift',\n        align:'Center',\n        render: rowData => {\n          return <span>{rowData.shift}</span>;\n        },\n      },\n    {\n      title: 'Heat No',\n      align:'left',\n      render: rowData => {\n        return <span>{rowData.heatNo}</span>;\n      },\n    },{\n        title: 'SerielNo From',\n        align:'center',\n        render: rowData => {\n          return <span>{rowData.serielNofrom}</span>;\n        },\n      },{\n        title: 'SerielNo To',\n        align:'center',\n        render: rowData => {\n          return <span>{rowData.serielNoTo}</span>;\n        },\n      },\n      {\n        title: 'Quantity',\n        align:'center',\n        render: rowData => {\n          return <span>{rowData.quantity}</span>;\n        },\n      },{\n        title: 'Edit',\n        align:'center',\n        render: rowData => {\n          return <FiEdit style={{cursor:\"pointer\"}} onClick={showFormHandler(rowData,\"edit\")}></FiEdit>\n        },\n      }\n  ];\n};\n\n\nexport default CastingTable","import React, { useState, useCallback, useEffect } from \"react\";\nimport CreateForm from \"../../../../Components/Forms/CreateForm\";\nimport { Col, Row, Card } from \"react-bootstrap\";\nimport classes from \"./dailyentry.module.css\";\nimport api from \"../../../../Api\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport useFetch, { Provider } from \"use-http\";\nimport { alertActions } from \"../../../../store/alert-slice\";\nimport CastingTable from \"./CastingTable\";\nimport SimpleCard from \"../../../../UI/cards/SimpleCard\";\nimport Table from \"../../../../Components/tables/Table\";\n\nfunction MeltingOutward(props) {\n  let rowWiseFields = 3;\n  const dispatch = useDispatch();\n  const [defValues, setDefValues] = useState({});\n  const [showAlert, alertMessage, alertVariant] = useSelector((state) => [\n    state.alertProps.showAlert,\n    state.alertProps.alertMessage,\n    state.alertProps.alertVariant,\n  ]);\n  const { get, post, response, loading, error } = useFetch({ data: [] });\n  const [stockDisplay, setStockDisplay] = useState({ stock: 0, produced: 0 });\n  let [heatNo, setHeatNo] = useState(\"Not Available\");\n  let [oldEntry, setOldEntry] = useState();\n  \n  const [loadState,setLoadState] = useState(Math.random());\n  var [maxQty,setMaxQty] = useState(props.orderQty)\n\n\n  const loadInitialData = useCallback(async () => {\n    const intialdata = await post(api + \"/castingEntry/latestEntry\", {\n      orderId: props.orderId,\n      prodProcMapId: props.selectedItem.prodProcMapId,\n      loadStateid: loadState,\n    });\n    console.log({ ...intialdata });\n    if (response.ok && intialdata.retValues.latestEntries)\n      setOldEntry([intialdata.retValues.latestEntries]);\n    console.log(intialdata.retValues.prodStock.producedQuantity);\n    setStockDisplay((oldStock) => ({\n      ...oldStock,\n      stock: intialdata.retValues.prodStock.stockQuantity ? intialdata.retValues.prodStock.producedQuantity\n      : 0,\n      produced: intialdata.retValues.prodStock.producedQuantity\n        ? intialdata.retValues.prodStock.producedQuantity\n        : 0,\n    }));\n    setMaxQty(maxQty)\n  }, [post, response,loadState]);\n\n  useEffect(() => {\n    loadInitialData();\n  }, [loadInitialData]); // componentDidMount\n\n  const setHeatNumber = (furnace) => async () => {\n    console.log(furnace);\n    if (furnace) {\n      const latestHeatNo = await post(api + \"/meltEntry/getHeatNo\", {\n        furnace: furnace,\n      });\n      if (response.ok) {\n        setHeatNo(latestHeatNo);\n      } else {\n        setHeatNo(\"Not Available\");\n      }\n    }\n  };\n\n  const AlertHandler = (alertContent, alertType) => {\n    dispatch(\n      alertActions.showAlertHandler({\n        showAlert: !showAlert,\n        alertMessage: alertContent,\n        alertVariant: alertType,\n      })\n    );\n  };\n\n  const saveDetails = async (entry) => {\n    //  procMaps\n    const prodEntryapi = entry.entryId\n      ? \"/castingEntry/update\"\n      : \"/castingEntry/create\";\n    console.log(prodEntryapi);\n    const returnObject = await post(api + prodEntryapi, entry);\n    console.log(returnObject);\n    if (returnObject.retValues.status == 1) {\n      if (entry.meltingEntryId) {\n        setOldEntry((oldArray) => [returnObject.retValues.prodEntry]);\n     //   AlertHandler(returnObject.retValues.message, \"success\");\n       setLoadState(Math.random())\n       console.log(loadState)\n      } else if (returnObject.retValues.prodEntry.entryId > 0) {\n        setOldEntry((oldArray) => [returnObject.retValues.prodEntry]);\n      //  AlertHandler(returnObject.retValues.message, \"success\");\n        setLoadState(Math.random())\n        console.log(loadState)\n      }\n    } else {\n      AlertHandler(returnObject.retValues.message, \"danger\");\n    }\n  };\n\n  const validate = (watchValues, errorMethods) => {\n    let { errors, setError, clearErrors } = errorMethods;\n    // console.log(watchValues[\"serielNoTo\"]);\n    // Firstname validation\n    if (watchValues[0] !== \"\") {\n      //  console.log(watchValues[0]);\n      {\n        setHeatNumber(watchValues[0])();\n      }\n    }\n  };\n\n  function onSubmit(values) {\n    console.log(values);\n    saveDetails(values);\n  }\n  const [selectedEntry,setSelectedEntry] = useState();\n  const handleEdit = (item, action) => () => {\n    if (action === \"edit\") {\n      setSelectedEntry({...item});\n    \n    }\n  };\n\n  let melting_header = (\n    <>\n      <Card body className={classes.title}>\n        <Row>\n          {/* <Col style={{backgroundColor:\"grey\"} } md={2}>Inward Stock 89</Col>*/}\n          <Col md={{ span: 6, offset: 3 }}>\n            {\" \"}\n            <h4>Casting Entry - {props.productName}</h4>{\" \"}\n          </Col>\n          <Col\n            style={{\n              backgroundColor: \"grey\",\n              justifyContent: \"right\",\n              borderRadius: \"5%\",\n            }}\n            md={{ span: 2, offset: 1 }}\n          >\n            Produced Qty\n            <br /> {stockDisplay.produced}\n          </Col>\n        </Row>\n      </Card>\n    </>\n  );\n  let template = {\n    fields: [\n      {\n        title: \"Date\",\n        type: \"date\",\n        name: \"entryDate\",\n        contains: \"date\",\n        validation: \"Date is Required\",\n        inpprops: {\n          format: \"dd/mm/yy\",\n        },\n      },\n      {\n        title: \"Shift\",\n        type: \"select\",\n        name: \"shift\",\n        validationProps: \"Please select Shift\",\n        contains: \"Select\",\n        options: [\n          { value: \"\", label: \"Select\" },\n          { value: \"Shift_A\", label: \"Shift A\" },\n          { value: \"Shift_B\", label: \"Shift B\" },\n          { value: \"Shift_C\", label: \"Shift C\" },\n        ],\n      },\n      {\n        title: \"Furnance\",\n        type: \"select\",\n        name: \"furnace\",\n        contains: \"Select\",\n        options: [\n          { value: \"\", label: \"Select\" },\n          { value: \"Furnance_1\", label: \"Furnace 1\" },\n          { value: \"Furnance_2\", label: \"Furnace 2\" },\n          { value: \"Furnance_3\", label: \"Furnace 3\" },\n          { value: \"Furnance_4\", label: \"Furnace 4\" },\n          { value: \"Furnance_5\", label: \"Furnace 5\" },\n        ],\n      },\n      {\n        title: \"Heat No\",\n        type: \"disabled\",\n        name: \"heatNo\",\n        contains: \"text\",\n        value: heatNo,\n      },\n      {\n        title: \"Production Qty\",\n        type: \"number\",\n        name: \"quantity\",\n        contains: \"number\",\n        inpprops: {\n          min: 1,\n          step: 1,\n          max : maxQty-stockDisplay.produced\n        },\n      },\n      {\n        title: \"Serial No From\",\n        type: \"text\",\n        name: \"serielNofrom\",\n        contains: \"text\",\n        inpprops: {\n          min: 3,\n          max: 50,\n        },\n      },\n      {\n        title: \"Serial No To\",\n        type: \"text\",\n        name: \"serielNoTo\",\n        contains: \"text\",\n        inpprops: {\n          min: 3,\n          max: 50,\n        },\n      },\n      {\n        type: \"hidden\",\n        name: \"orderId\",\n        contains: \"number\",\n        value: props.orderId,\n      },\n      {\n        type: \"hidden\",\n        name: \"prodProcMapId\",\n        contains: \"number\",\n        value: props.selectedItem.prodProcMapId,\n      },\n    ],\n  };\n  return (\n    <>\n      {melting_header}\n      <CreateForm\n        template={template}\n        watchFields={[\"furnace\"]}\n        rowwise={rowWiseFields}\n        validate={validate}\n        onSubmit={onSubmit}\n        onCancel={props.onCancel}\n        buttonName=\"Add\"\n        defaultValues={selectedEntry}\n      ></CreateForm>\n      <SimpleCard>\n        {<Table cols={CastingTable(handleEdit)} data={oldEntry}></Table>}\n      </SimpleCard>\n    </>\n  );\n}\n\nexport default MeltingOutward;\n","import React from 'react';\nimport {FiEdit} from 'react-icons/fi'\nimport {AiOutlinePullRequest,AiOutlineReconciliation} from 'react-icons/ai'\n\n// This is the table constant/settings which needed to render table elements\n\n\nexport const MeltTable = (showFormHandler) => {\n  return [\n    {\n        title: 'Melt Date',\n        align:'Center',\n        render: rowData => {\n          return <span>{rowData.MeltingDate}</span>;\n        },\n      },\n      {\n        title: 'Shift',\n        align:'Center',\n        render: rowData => {\n          return <span>{rowData.shift}</span>;\n        },\n      },\n    {\n      title: 'Melt No',\n      align:'left',\n      render: rowData => {\n        return <span>{rowData.heatNo}</span>;\n      },\n    },{\n        title: 'Furnance',\n        align:'center',\n        render: rowData => {\n          return <span>{rowData.furnace}</span>;\n        },\n      },{\n        title: 'Alloy Grade(Weight kgs)',\n        align:'center',\n        render: rowData => {\n          return <span>{`${rowData.material.materialName} (${rowData.materialWeight})`}</span>;\n        },\n      },\n      {\n        title: 'Runner(kgs)',\n        align:'center',\n        render: rowData => {\n          return <span>{`${rowData.runnerWeight}`}</span>;\n        },\n      },{\n        title: 'Total Weight',\n        align:'center',\n        render: rowData => {\n          return <span>{rowData.materialWeight + rowData.runnerWeight}</span>;\n        },\n      },{\n        title: 'Edit',\n        align:'center',\n        render: rowData => {\n          return <FiEdit style={{cursor:\"pointer\"}} onClick={showFormHandler(rowData,\"edit\")}></FiEdit>\n        },\n      }\n  ];\n};\n\n\nexport default MeltTable","import React,{useState,useCallback,useEffect} from 'react'\nimport CreateForm from '../../../../Components/Forms/CreateForm'\nimport {Row,Col,Button,Card} from 'react-bootstrap'\nimport ProcessForm from './ProcessForm'\nimport classes from './dailyentry.module.css'\nimport MeltingOutward from './MeltingOutward'\nimport SimpleCard from '../../../../UI/cards/SimpleCard'\nimport Table from '../../../../Components/tables/Table'\nimport { MeltData } from './MeltData'\nimport { MeltTable } from './MeltTable'\nimport useFetch, { Provider } from \"use-http\";\nimport api from \"../../../../Api\";\nimport { alertActions } from \"../../../../store/alert-slice\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction MeltingForm(props) {\n\n  let [entries,setEntries]=useState([]);\n  const[meltEntryId,setMeltEntryId]=useState(0);\n  const [selctedEntry,setSelectedEntry] = useState();\n  const dispatch = useDispatch();\n  const { get, post, response, loading, error } = useFetch({ data: [] });\n  const [loadedOptions,setLoadedOptions]=useState({material:[{ value: \"\", label: \"Select\" }]})\n  const [loadState,setLoadState] = useState(Math.random());\n \n  const [showAlert, alertMessage, alertVariant] = useSelector((state) => [\n    state.alertProps.showAlert,\n    state.alertProps.alertMessage,\n    state.alertProps.alertVariant,\n  ]);\n\n  const loadInitialOptions = useCallback(async () => {\n    // const { ok } = response // BAD, DO NOT DO THIS\n    const loadedmaterials = await get(api + \"/material/loadOptions\");\n    setLoadedOptions({...loadedOptions,material:[...loadedOptions.material,...loadedmaterials]});\n    // console.log({...props.selectedItem})\n  }, [get, response]);\n  \n  const loadInitialData = useCallback(async () => {\n    // const { ok } = response // BAD, DO NOT DO THIS\n    const intialEntries = await post(api + \"/meltEntry/meltEntrys\" ,{\"id\":1,\"loadState\":Date().toLocaleString()});\n    if (response.ok) setEntries(intialEntries);\n    //  console.log(initialCusts)\n  }, [get, response]);\n\n  const AlertHandler=(alertContent,alertType)=>{\n    dispatch(\n     alertActions.showAlertHandler({\n      showAlert : !showAlert, \n      alertMessage : alertContent,\n      alertVariant : alertType\n    }\n     )\n    );\n  }\n\n  useEffect(() => {\n    loadInitialOptions();\n    loadInitialData();\n  }, [loadState]); // componentDidMount\n\n  \n \n  // <Row className={`${classes.buttCon} d-flex justify-content-center`}>\n  // <Button variant='outline-primary' className={classes.btn} onClick={showInwardHandler}>Inward</Button>\n  // <Button variant='outline-primary' className={classes.btn} onClick={showOutwardHandler}>Outward</Button>\n  // </Row>\n  \n  const melting_header=<>\n  <Card body className={classes.title}>\n    <Row>\n    <Col md={{ span: 6, offset: 3 }}> <h4>Melting Inward Details</h4> </Col> \n    </Row>\n    </Card>\n  </>\n\nlet rowWiseFields = 3;\n  let template = {\n    fields: [\n        {\n            title: 'Melt Date',\n            type: 'date',\n            name: 'MeltingDate',\n            contains:\"date\",\n            validationProps:\"Date is Required\",\n            inpprops:{\n              format:\"dd/mm/yy\"\n            },\n      },{\n        title: 'Shift',\n        type: 'select',\n        name: 'shift',\n        validationProps:\"Please select Shift\",\n        contains: 'Select',\n         options:[\n        {value:\"\", label:'Select'},\n        {value:\"Shift_1\", label:'Shift 1'},\n        {value:\"Shift_2\", label:'Shift 2'},\n        {value:\"Shift_3\" ,label:'Shift 3'},\n         ]\n    },\n      {\n        title: 'Alloy',\n        type: 'select',\n        name: 'materialId',\n        contains: 'Select',\n         options:loadedOptions.material\n    },{\n            title: 'Alloy Wgt',\n            type: 'number',\n            name: 'materialWeight',\n            contains: 'number',\n            inpprops:{\n                min:0\n            }\n        },{\n              title: 'Runner Wgt',\n              type: 'number',\n              name: 'runnerWeight',\n              contains: 'number',\n              inpprops:{\n                  min:0\n              }\n          },  {\n            title: 'Furnance',\n            type: 'select',\n            name: 'furnace',\n            contains: 'Select',\n             options:[\n            {value:\"\", label:'Select'},\n            {value:\"Furnance_1\", label:'Furnace 1'},\n            {value:\"Furnance_2\", label:'Furnace 2'},\n            {value:\"Furnance_3\", label:'Furnace 3'},\n            {value:\"Furnance_4\", label:'Furnace 4'},\n            {value:\"Furnance_5\", label:'Furnace 5'}\n          ]\n        }, {\n            title: 'Batch No(Heat Code)',\n            type: 'text',\n            name: 'heatNo',\n            contains: 'text',\n            inpprops:{\n               min:3,\n               max:50\n            }\n        },\n    {\n        type: 'hidden',\n        name: 'meltingEntryId',\n        contains:\"number\",\n        value:meltEntryId,\n\n  }\n    ]\n}\n\nconst saveDetails = async (entry) => {\n  //  procMaps\n  const meltEntryapi = entry.meltingEntryId ? \"/meltEntry/create\" : \"/meltEntry/create\"\n  console.log(meltEntryapi)\n  const returnObject = await post(api + meltEntryapi, entry);\n  console.log(returnObject);\n  if (returnObject.retValues.status == 1) {\n    if (entry.meltingEntryId) {\n      setEntries(\n        entries.map((melt) =>\n        melt.meltingEntryId === returnObject.retValues.meltEntry.meltingEntryId\n            ? returnObject.retValues.meltEntry\n            : melt\n        )\n      );\n      setLoadState(Math.random())\n      AlertHandler(returnObject.retValues.message, \"success\");\n    } else if (returnObject.retValues.meltEntry.meltEntryId > 0) {\n      setEntries([returnObject.retValues.meltEntry,...entries]);\n      AlertHandler(returnObject.retValues.message, \"success\");\n      setLoadState(Math.random())\n    }\n  } else {\n    AlertHandler(returnObject.retValues.message, \"danger\");\n    setLoadState(Math.random())\n  }\n};\n\nconst handleEdit = (item, action) => () => {\n  if (action === \"edit\") {\n    setSelectedEntry(item);\n  \n  }\n};\n\n\nfunction onSubmit(values) {\n  saveDetails(values);\n}\n  return (\n    <>\n    {melting_header}\n    <CreateForm  template={template}\n    // watchFields={['firstname','password']}\n     rowwise={rowWiseFields}\n     validate={validate}\n     onSubmit={onSubmit} \n     onCancel={props.onCancel}\n     buttonName=\"Add\"\n     defaultValues={selctedEntry}>\n     </CreateForm> \n     <SimpleCard>\n       <Table cols={MeltTable(handleEdit)} data={entries}></Table>\n     </SimpleCard>\n     </>\n  )\n}\n\n\n  \n  function validate(watchValues, errorMethods) {\n    let { errors, setError, clearErrors } = errorMethods;\n  \n    // Firstname validation\n    if(watchValues['firstname'] === 'Admin'){\n        if(!errors['firstname']){\n            setError('firstname', {\n                type: 'manual',\n                message: 'You cannot use this first name'\n            })\n        }\n    }else{\n        if(errors['firstname'] && errors['firstname']['type'] === 'manual'){\n            clearErrors('firstname');\n        }\n    }\n  }\n\nexport default MeltingForm","import React, { useState, useCallback, useEffect } from \"react\";\nimport classes from \"./dailyentry.module.css\";\nimport SimpleCard from \"../../../../UI/cards/SimpleCard\";\nimport { Card, Modal } from \"react-bootstrap\";\nimport Table from \"../../../../Components/tables/Table\";\nimport { ProcessTable } from \"./ProcessTable\";\nimport { ProcessData } from \"./ProcessData\";\nimport MeltingForm from \"./MeltingForm\";\nimport ProcessForm from \"./ProcessForm\";\nimport QualityForm from \"./QualityForm\";\nimport { Button, Row, Col } from \"react-bootstrap\";\nimport MeltingOutward from \"./MeltingOutward\";\nimport useFetch, { Provider } from \"use-http\";\nimport api from \"../../../../Api\";\nimport { alertActions } from \"../../../../store/alert-slice\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction DailyEntry(props) {\n  const [intialvalues, setIntialvalues] = useState();\n  const [procMaps, setProcMaps] = useState();\n  const dispatch = useDispatch();\n  const { get, post, response, loading, error } = useFetch({ data: [] });\n\n  const [showAlert, alertMessage, alertVariant] = useSelector((state) => [\n    state.alertProps.showAlert,\n    state.alertProps.alertMessage,\n    state.alertProps.alertVariant,\n  ]);\n\n  const loadInitialdata = useCallback(async () => {\n    const { ok } = response; // BAD, DO NOT DO THIS\n    const prodId = props.selectedItem.order.product.productId;\n    const loadeddata = await post(api + \"/ppMap/processMaps\", {\n      id: props.selectedItem.order.product.productId,\n      \"loadStateTime\":Date().toLocaleString()\n    });\n    setProcMaps(loadeddata);\n    //console.log({ ...props.selectedItem.productId });\n  }, [get, response]);\n\n  const AlertHandler = (alertContent, alertType) => {\n    dispatch(\n      alertActions.showAlertHandler({\n        showAlert: !showAlert,\n        alertMessage: alertContent,\n        alertVariant: alertType,\n      })\n    );\n  };\n\n  useEffect(() => {\n    loadInitialdata();\n  }, [loadInitialdata]); // componentDidMount\n\n  const [selectedItem, setSelectedItem] = useState({\n    id: \"\",\n    Month: \"\",\n    Year: \"\",\n    Remarks: \"\",\n    Quantity: \"\",\n  });\n\n  const [showFormParams, setShowformparams] = useState({\n    showForm: false,\n    selectedForm: \"\",\n    title: \"\",\n    selectedItem: {\n      id: 0,\n      productName: \"\",\n      cusName: \"\",\n      part: \"\",\n      quantity: \"\",\n      cost: \"\",\n    },\n  });\n\n  const actions = [\"process\", \"inspection\"];\n\n  const loadStateController = (action) =>{\n    props.loadStateController(action)\n  }\n  const showFormHandler = (item) => () => {\n    console.log({ ...item });\n    if (item.process.processId === 15) {\n      const newState = {\n        showForm: true,\n        selectedForm: (\n          <MeltingOutward\n            onCancel={hideFormHandler}\n            selectedItem={{...item}}\n            orderId={props.selectedItem.orderId}\n            loadStateController = {props.loadStateController}\n            orderQty={props.selectedItem.order.quantity}\n            productName = {props.selectedItem.order.product.productName}\n          />\n        ),\n        selectedItem: { ...item },\n        title: \"\",\n      };\n      setShowformparams({ ...showFormParams, ...newState });\n    } else if ((item.process.processId !=15 ) & (item.process.proSubCat===\"Production\") ) {\n      // alert(JSON.stringify({...item}));\n      const newState = {\n        showForm: true,\n        selectedForm: (\n          <ProcessForm\n            onCancel={hideFormHandler}\n            selectedItem={{...item}}\n            orderId={props.selectedItem.order.orderId}\n            loadStateController = {props.loadStateController}\n            productName = {props.selectedItem.order.product.productName}\n          />\n        ),\n        selectedItem: { ...item },\n        title: \"\",\n      };\n      setShowformparams({ ...showFormParams, ...newState });\n    } else if (item.process.proSubCat===\"Quality\") {\n      // alert(JSON.stringify({...item}));\n      //setShowformparams({...showFormParams,showFormParams.selectedItem:item})\n      const newState = {\n        showForm: true,\n        selectedForm: (\n          <QualityForm\n            onCancel={hideFormHandler}\n            selectedItem={{...item}}\n            orderId={props.selectedItem.order.orderId}\n            loadStateController = {props.loadStateController}\n            productName = {props.selectedItem.order.product.productName}\n          />\n        ),\n        selectedItem: { ...item },\n      };\n      setShowformparams({ ...showFormParams, ...newState });\n    } else if (item[\"id\"] == 8) {\n      // alert(JSON.stringify({...item}));\n      //setShowformparams({...showFormParams,showFormParams.selectedItem:item})\n      const newState = {\n        showForm: true,\n        selectedForm: (\n          <QualityForm\n            onCancel={hideFormHandler}\n            selectedItem={item[\"ProcessName\"]}\n            orderId={props.selectedItem.order.orderId}\n            loadStateController = {props.loadStateController}\n            productName = {props.selectedItem.order.product.productName}\n          />\n        ),\n        selectedItem: { ...item },\n        title: \"\",\n      };\n      setShowformparams({ ...showFormParams, ...newState });\n    }\n  };\n  const hideFormHandler = () => {\n    setShowformparams({\n      ...showFormParams,\n      showForm: false,\n      selectedForm: \"\",\n      title: \"\",\n      selectedItem: {\n        ...showFormParams.selectedItem,\n        ...{\n          id: 0,\n          productName: \"\",\n          cusName: \"\",\n          part: \"\",\n          quantity: \"\",\n          cost: \"\",\n        },\n      },\n    });\n  };\n  return (\n    <>\n      <Modal className={classes.modal}\n        {...props}\n        showFormHandler={showFormHandler} \n        size=\"xl\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        show={showFormParams.showForm}\n        onHide={hideFormHandler}\n      >\n        <Modal.Body>{showFormParams.selectedForm}</Modal.Body>\n      </Modal>\n      <SimpleCard>\n        <Card body className={classes.title}>\n          <h5>\n            Production Entry For{\" \"} {props.selectedItem.order.product.productName}\n          </h5>{\" \"}\n        </Card>\n        <SimpleCard\n          className={classes.simcard}\n        >\n          <Table\n            data={procMaps}\n            cols={ProcessTable(showFormHandler, actions, [2, 3])}\n          ></Table>\n        </SimpleCard>\n      </SimpleCard>\n    </>\n  );\n}\n\nexport default DailyEntry;\n","export const Rmdata = [\n    { \"id\":1,\n      \"RmGrade\": \"RM32454343\",\n      \"Alloy\":\"60\",\n      \"Runner\":\"20\",\n      \"Qty\": \"4 kgs\",\n      \"type\":\"Ingots\",\n      \"tQty\": \"80 kgs\",\n    },\n    {\n      \"id\": 2,\n      \"RmGrade\": \"TM3434322\",\n      \"Qty\": \"2 kgs\",\n      \"Alloy\":\"30\",\n      \"Runner\":\"10\",\n      \"type\":\"Ingots\",\n      \"tQty\": \"40 kgs\",\n    },\n    {\n      \"id\": 3,\n      \"RmGrade\": \"LM4354545\",\n      \"Qty\": \"1 kgs\",\n      \"type\":\"Consumable\",\n      \"tQty\": \"20 kgs\",\n    },\n    {\n      \"id\": 4,\n      \"RmGrade\": \"YU32454343\",\n      \"Qty\": \"3 kgs\",\n      \"type\":\"Consumable\",\n      \"tQty\": \"60 kgs\",\n    },\n    {\n      \"id\": 5,\n      \"RmGrade\": \"EF32454343\",\n      \"Qty\": \"2 kgs\",\n      \"type\":\"Consumable\",\n      \"tQty\": \"40 kgs\",\n    }\n  ]","import React from 'react';\n\n\n// This is the table constant/settings which needed to render table elements\n\n\n\nexport const RmTable = (showFormHandler,actions) => {\n  \n  return [\n    {\n      title: 'Raw Material',\n      align:'center',\n      render: rowData => {\n        const Ignots = <><span style={{cursor:\"pointer\",color:\"blue\"}} onClick={showFormHandler(rowData,actions[1])}>{rowData.RmGrade}</span>\n        <br/><p>Alloy-{rowData.Alloy} &nbsp; Runner-{rowData.Runner}</p>\n        </>\n         return (\n       <> {`${rowData.type}`==\"Ingots\" ?  Ignots : <span>{rowData.RmGrade}</span> }</>\n      )},\n    },\n    {\n      title: 'Type',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.type}</span>;\n      \n      },\n    },\n    {\n      title: 'Unit Quantity',\n      align:'center',\n      render: rowData => {\n        return <span>{rowData.Qty}</span>;\n      \n      },\n    },\n    {\n      title: 'Today Requiremnet',\n      align:'center',\n      render: rowData => {\n        const splitUp = <><span style={{cursor:\"pointer\",color:\"blue\"}} onClick={showFormHandler(rowData,actions[2])}>{rowData.tQty}</span>\n        </>\n        return (\n          <> {`${rowData.type}`==\"Ingots\" ?  splitUp : <span>{rowData.tQty}</span> }</>\n         )\n        ;\n      },\n    },\n    \n  ];\n};\n\n\nexport default RmTable","// extracted by mini-css-extract-plugin\nexport default {\"monthlyform\":\"rmentry_monthlyform__E8Xbs\",\"title\":\"rmentry_title__EAuWf\",\"shRow\":\"rmentry_shRow__ivI2s\",\"shCol\":\"rmentry_shCol__rHOP3\",\"tableCon\":\"rmentry_tableCon__ajAC0\",\"formCon\":\"rmentry_formCon__9vU+E\",\"btn\":\"rmentry_btn__swrpy\",\"buttCon\":\"rmentry_buttCon__x2BoY\"};","import React from 'react'\nimport { Card } from 'react-bootstrap';\nimport CreateForm from '../../../../Components/Forms/CreateForm'\n\nfunction RmForm(props) {\n  let rowWiseFields = 2;\n\n  let template = {\n    heading: 'Enter Raw Material Details',\n    fields: [\n        {\n            title: 'Date',\n            type: 'date',\n            name: 'date',\n            contains:\"date\",\n            validation:\"Date is Required\",\n            dateprops:{\n              format:\"dd/mm/yy\"\n            },\n      },{\n        title: 'Type',\n        type: 'select',\n        name: 'furnance',\n        contains: 'Select',\n         options:[\n        {value:\"\", label:'Select'},\n        {value:1, label:'Alloy Ingots'},\n        {value:2, label:'Runners'},\n        {value:3, label:'Consumables'},\n        {value:4, label:'GDC General'}\n      ]\n    },\n      {\n        title: 'Raw Material',\n        type: 'select',\n        name: 'furnance',\n        contains: 'Select',\n         options:[\n        {value:\"\", label:'Select'},\n        {value:1, label:'Steel grade001'},\n        {value:0, label:'Aluminium grade002'},\n        {value:0, label:'Iron Ore grade001'},\n        {value:0, label:'Potash grade001'},\n        {value:0, label:'Nitro grade001'}\n      ]\n    },\n        {\n            title: 'Weight',\n            type: 'number',\n            name: 'Qty1',\n            contains: 'number',\n            numprops:{\n                min:.1,\n                step:.5\n            }\n        },\n      \n\n\n    ]\n}\n  return (\n    <Card>\n    <CreateForm  template={template}\n    // watchFields={['firstname','password']}\n     rowwise={rowWiseFields}\n     validate={validate}\n     onSubmit={onSubmit} \n     onCancel={props.onCancel}\n     buttonName=\"Add\">\n     </CreateForm>\n     </Card>\n  )\n}\n\nfunction onSubmit(values) {\n    console.log(values);\n  }\n  \n  function validate(watchValues, errorMethods) {\n    let { errors, setError, clearErrors } = errorMethods;\n  \n    // Firstname validation\n    if(watchValues['firstname'] === 'Admin'){\n        if(!errors['firstname']){\n            setError('firstname', {\n                type: 'manual',\n                message: 'You cannot use this first name'\n            })\n        }\n    }else{\n        if(errors['firstname'] && errors['firstname']['type'] === 'manual'){\n            clearErrors('firstname');\n        }\n    }\n  }\n\nexport default RmForm","import React from 'react'\nimport { Card } from 'react-bootstrap';\nimport CreateForm from '../../../../Components/Forms/CreateForm'\n\nfunction SplitUpForm(props) {\n  let rowWiseFields = 2;\n\n  let template = {\n    heading: 'Enter Alloy/Runner Splitup',\n    fields: [\n        {\n            title: 'Alloy Wgt(kgs)',\n            type: 'number',\n            name: 'Qty1',\n            contains: 'number',\n            inpprops:{\n                min:50,\n                step:2\n            }\n        },{\n          title: 'Runner Wgt(kgs)',\n          type: 'number',\n          name: 'Qty1',\n          contains: 'number',\n          inpprops:{\n              min:50,\n              step:2\n          }\n      },\n        \n    ]\n}\n  return (\n    <Card>\n    <CreateForm  template={template}\n    // watchFields={['firstname','password']}\n     rowwise={rowWiseFields}\n     validate={validate}\n     onSubmit={onSubmit} \n     onCancel={props.onCancel}\n     buttonName=\"Save\">\n     </CreateForm>\n     </Card>\n  )\n}\n\nfunction onSubmit(values) {\n    console.log(values);\n  }\n  \n  function validate(watchValues, errorMethods) {\n    let { errors, setError, clearErrors } = errorMethods;\n  \n    // Firstname validation\n    if(watchValues['firstname'] === 'Admin'){\n        if(!errors['firstname']){\n            setError('firstname', {\n                type: 'manual',\n                message: 'You cannot use this first name'\n            })\n        }\n    }else{\n        if(errors['firstname'] && errors['firstname']['type'] === 'manual'){\n            clearErrors('firstname');\n        }\n    }\n  }\n\nexport default SplitUpForm","import React from 'react'\nimport { Card } from 'react-bootstrap';\nimport CreateForm from '../../../../Components/Forms/CreateForm'\n\nfunction AlternateForm(props) {\n  let rowWiseFields = 2;\n\n  let template = {\n    heading: 'Select Alternate Alloy',\n    fields: [\n      {\n        title: 'Alternate Alloys',\n        type: 'select',\n        name: 'furnance',\n        contains: 'Select',\n         options:[\n        {value:\"\", label:'Select'},\n        {value:1, label:'Steel grade001'},\n        {value:0, label:'Aluminium grade002'},\n        {value:0, label:'Iron Ore grade001'},\n        {value:0, label:'Potash grade001'},\n        {value:0, label:'Nitro grade001'}\n      ]\n    }\n    ]\n}\n  return (\n    <Card>\n    <CreateForm  template={template}\n    // watchFields={['firstname','password']}\n     rowwise={rowWiseFields}\n     validate={validate}\n     onSubmit={onSubmit} \n     onCancel={props.onCancel}\n     buttonName=\"Save\">\n     </CreateForm>\n     </Card>\n  )\n}\n\nfunction onSubmit(values) {\n    console.log(values);\n  }\n  \n  function validate(watchValues, errorMethods) {\n    let { errors, setError, clearErrors } = errorMethods;\n  \n    // Firstname validation\n    if(watchValues['firstname'] === 'Admin'){\n        if(!errors['firstname']){\n            setError('firstname', {\n                type: 'manual',\n                message: 'You cannot use this first name'\n            })\n        }\n    }else{\n        if(errors['firstname'] && errors['firstname']['type'] === 'manual'){\n            clearErrors('firstname');\n        }\n    }\n  }\n\nexport default AlternateForm","import React,{useState} from 'react'\nimport SearchCard from '../../../../UI/cards/SearchCard'\nimport SimpleCard from '../../../../UI/cards/SimpleCard'\nimport { Rmdata } from './RmData'\nimport RmTable from './RmTable'\nimport Table from '../../../../Components/tables/Table'\nimport classes from './rmentry.module.css'\nimport { Row,Button,Modal } from 'react-bootstrap'\nimport RmForm from './RmForm'\nimport SplitUpForm from './SplitUpForm'\nimport AlternateForm from './AlternateForm'\n\nfunction RawMaterial(props) {\n    const [showFormParams,setShowformparams]=useState({\n        showForm:false,\n        selectedForm:\"\",\n        selectedItem:{ id:0,\n            productName: \"\",\n            cusName: \"\",\n            part: \"\",\n            quantity: \"\",\n            cost: \"\"\n            }\n    })\n\n    const actions = [\"RawMaterial\",\"alternate\",\"splitup\"]\n\n    const showFormHandler = (item,action) => () => {\n        if(action==\"RawMaterial\"){\n            const newState={\n                showForm:true,\n                selectedForm:<RmForm onCancel={hideFormHandler} selected={showFormParams.selectedItem}/>,\n                selectedItem:{...item}\n            }\n            setShowformparams({...showFormParams,...newState})           \n            }else if(action==\"alternate\"){\n                const newState={\n                    showForm:true,\n                    selectedForm:<AlternateForm onCancel={hideFormHandler} selected={showFormParams.selectedItem}/>,\n                    selectedItem:{...item}\n                }\n                setShowformparams({...showFormParams,...newState})           \n                }else if(action==\"splitup\"){\n                    const newState={\n                        showForm:true,\n                        selectedForm:<SplitUpForm  onCancel={hideFormHandler} selected={showFormParams.selectedItem}></SplitUpForm>,\n                        selectedItem:{...item}\n                    }\n                    setShowformparams({...showFormParams,...newState})           \n                    }\n    }\n\n    const hideFormHandler=()=>{\n        setShowformparams({...showFormParams,\n            showForm:false,\n            selectedForm:\"\",\n            selectedItem:{...showFormParams.selectedItem,...{ id:0,\n                productName: \"\",\n                cusName: \"\",\n                part: \"\",\n                quantity: \"\",\n                cost: \"\",\n                }}\n        })\n       \n        }\n  return (\n      <>\n      <Modal show={showFormParams.showForm} onHide={hideFormHandler}>\n        <Modal.Header closeButton>\n          <Modal.Title></Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{showFormParams.selectedForm}</Modal.Body>\n      </Modal>\n     <SearchCard title=\"Raw Material Details\" \n                 buttonName=\"Add Material\" \n                 onHeaderClick={showFormHandler({},\"RawMaterial\")} \n                 bottonShow={showFormParams.showForm}>\n    \n        <Table cols={RmTable(showFormHandler,actions)} data={Rmdata} className={classes.tableCon}></Table>\n       \n        <Row className={classes.buttCon}>\n        <Button className={classes.btn}>Request</Button>\n        <Button variant='danger' className={classes.btn} onClick={props.onCancel}>Cancel</Button>\n        \n        </Row>\n   </SearchCard>\n   </>\n  )\n}\n\nexport default RawMaterial\n","import React, { useState, useReducer ,useCallback,useEffect} from \"react\";\nimport CreateForm from \"../../../Components/Forms/CreateForm\";\nimport SearchCard from \"../../../UI/cards/SearchCard\";\nimport Modal from \"../../../UI/Modal/Modal\";\nimport ProdPlanTable from \"./ProdPlanTable\";\nimport classes from \"./productionentry.module.css\";\nimport { data } from \"./data\";\nimport Table from \"../../../Components/tables/Table\";\nimport SimpleCard from \"../../../UI/cards/SimpleCard\";\nimport AddPlanForm from \"./AddPlanForm\";\nimport Dispatch from \"./Dispatch/Dispatch\";\nimport DailyEntry from \"./DailyEntry/DailyEntry\";\nimport RawMaterial from \"./RawMaterial/RawMaterial\";\nimport { Button, Row } from \"react-bootstrap\";\nimport MeltingForm from \"./DailyEntry/MeltingForm\";\nimport useFetch, { Provider } from \"use-http\";\nimport api from \"../../../Api\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { modalActions } from \"../../../store/modal-Slice\";\nimport { alertActions } from \"../../../store/alert-slice\";\nimport { productionEntryActions} from \"../../../store/loadStates/productionEntry-slice\";\n\n\nconst rowWiseFields = 4;\nconst template = {\n  fields: [\n    {\n      title: \"Production Date\",\n      type: \"date\",\n      name: \"planDate\",\n      contains: \"date\",\n      inpprops: {\n        format: \"mm/yy\",\n      },\n    },\n  ],\n};\nconst actions = [\"dailyForm\", \"rmRequest\", \"productionEntry\", \"dispatch\"];\n\nfunction PlanSearch(props) {\n  const [showModal, selectedForm, selectedData] = useSelector((state) => [\n    state.modalProps.showModal,\n    state.modalProps.selectedForm,\n    state.modalProps.selectedData,\n  ]);\n  const [showAlert, alertMessage, alertVariant] = useSelector((state) => [\n    state.alertProps.showAlert,\n    state.alertProps.alertMessage,\n    state.alertProps.alertVariant,\n  ]);\n  const [loadState,setLoadState] = useState(Math.random())\n  let [intialPlans,setInitialPlans]=useState()\n  const dispatch = useDispatch();\n  const { get, post, response, loading, error } = useFetch({ data: [] });\n  const loadInitialData = useCallback(async () => {\n    // const { ok } = response // BAD, DO NOT DO THIS\n    const plans = await post(api + \"/dailyPlan/listplans\", {\"id\":1,\"loadState\":Date().toString()});\n    if (response.ok) setInitialPlans(plans);\n    //  console.log(initialCusts)\n  }, [get, response]);\n\n  useEffect(() => {\n    loadInitialData();\n  }, [loadState]); // componentDidMount\n\n  const AlertHandler = (alertContent, alertType) => {\n    dispatch(\n      alertActions.showAlertHandler({\n        showAlert: !showAlert,\n        alertMessage: alertContent,\n        alertVariant: alertType,\n      })\n    );\n  };\n\n  const saveDetails = async (order) => {\n    //  procMaps\n    const orderapi = order.orderId ? \"/order/update\" : \"/order/create\"\n    console.log(orderapi)\n    const returnObject = await post(api + orderapi, order);\n    console.log(returnObject);\n    if (returnObject.retValues.status == 1) {\n      if (order.orderId) {\n        loadInitialData()\n        dispatch(modalActions.hideModalHandler());\n        AlertHandler(returnObject.retValues.message, \"success\");\n      } else if (returnObject.retValues.order.orderId > 0) {\n        dispatch(modalActions.hideModalHandler());\n        AlertHandler(returnObject.retValues.message, \"success\");\n        loadInitialData()\n      }\n    } else {\n      dispatch(modalActions.hideModalHandler());\n      AlertHandler(returnObject.retValues.message, \"danger\");\n    }\n  };\n\n  const searchPlans = async(date)=>{\n    const plans = await post(api + \"/dailyPlan/searchPlans\", {\"id\":1,\"planDate\":date});\n    if (response.ok) setInitialPlans(plans);\n  }\n\n  const showFormHandler = (item, action) => () => {\n    if (action == \"dailyForm\") {\n      dispatch(\n        modalActions.showModalHandler({\n          selectedData: { ...item },\n          selectedForm: (\n            <AddPlanForm\n              onCancel={() => dispatch(modalActions.hideModalHandler())}\n              selectedItem={{ ...item }}\n              saveFunction={saveDetails}\n              loadStateController={handleLoadChange}\n            />\n          ),\n          showModal: true,\n        })\n      );\n    } else if (action == \"dispatch\") {\n      // alert(JSON.stringify({...item}));\n\n      dispatch(\n        modalActions.showModalHandler({\n          selectedData: { ...item },\n          selectedForm: (\n            <Dispatch\n              onCancel={() => dispatch(modalActions.hideModalHandler())}\n              selectedItem={{ ...item }}\n              saveFunction={saveDetails}\n              loadStateController={handleLoadChange}\n            />\n          ),\n          showModal: true,\n        })\n      );\n    } else if (action == \"productionEntry\") {\n      // alert(JSON.stringify({...item}));\n      //setShowformparams({...showFormParams,showFormParams.selectedItem:item})\n\n      dispatch(\n        modalActions.showModalHandler({\n          selectedData: { ...item },\n          selectedForm: (\n            <DailyEntry\n              onCancel={() => dispatch(modalActions.hideModalHandler())}\n              selectedItem={{ ...item }}\n              saveFunction={saveDetails}\n              loadStateController={handleLoadChange}\n            />\n          ),\n          showModal: true,\n        })\n      );\n    } else if (action == \"rmRequest\") {\n      // alert(JSON.stringify({...item}));\n      //setShowformparams({...showFormParams,showFormParams.selectedItem:item})\n\n      dispatch(\n        modalActions.showModalHandler({\n          selectedData: { ...item },\n          selectedForm: (\n            <RawMaterial\n              onCancel={() => dispatch(modalActions.hideModalHandler())}\n              selectedItem={{ ...item }}\n              saveFunction={saveDetails}\n              loadStateContoller={handleLoadChange}\n            />\n          ),\n          showModal: true,\n        })\n      );\n    } else if (action == \"meltingInward\") {\n      // alert(JSON.stringify({...item}));\n      //setShowformparams({...showFormParams,showFormParams.selectedItem:item})\n\n      dispatch(\n        modalActions.showModalHandler({\n          selectedData: { ...item },\n          selectedForm: (\n            <MeltingForm\n              onCancel={() => dispatch(modalActions.hideModalHandler())}\n              selectedItem={{ ...item }}\n              saveFunction={saveDetails}\n              loadStateController={handleLoadChange}\n            />\n          ),\n          showModal: true,\n        })\n      );\n    }\n  };\n  \n  const handleLoadChange = (action) => {\n    setLoadState(Math.random());\n    // dispatch(orderEntryActions.);\n  };\n\n  function onSubmit(values) {\n    searchPlans(values.planDate);\n  }\n\n  return (\n    <div className={classes.container}>\n      <SearchCard\n        title=\"Production Entry\"\n        buttonName=\"Add\"\n        onHeaderClick={showFormHandler({}, \"dailyForm\")}\n        bottonShow={true}\n      >\n        <CreateForm\n          template={template}\n          rowwise={rowWiseFields}\n          validate={validate}\n          onSubmit={onSubmit}\n          onCancel={props.onCancel}\n          buttonName=\"Search\"\n        ></CreateForm>\n      </SearchCard>\n      <SimpleCard md={12}>\n        <Row>\n          <Button\n            className={classes.btn}\n            onClick={showFormHandler({}, \"rmRequest\")}\n          >\n            Add Raw Materials\n          </Button>\n          <Button\n            className={classes.btn}\n            onClick={showFormHandler(\n              {},\n              \"meltingInward\"\n            )}\n          >\n            Melting Entry\n          </Button>\n        </Row>\n        <Table\n          cols={ProdPlanTable(showFormHandler, actions,[8])}\n          data={intialPlans}\n          striped\n        />\n      </SimpleCard>\n    </div>\n  );\n}\n\nexport default PlanSearch;\n\n\n\nfunction validate(watchValues, errorMethods) {\n  let { errors, setError, clearErrors } = errorMethods;\n\n  // Firstname validation\n  if (watchValues[\"firstname\"] === \"Admin\") {\n    if (!errors[\"firstname\"]) {\n      setError(\"firstname\", {\n        type: \"manual\",\n        message: \"You cannot use this first name\",\n      });\n    }\n  } else {\n    if (errors[\"firstname\"] && errors[\"firstname\"][\"type\"] === \"manual\") {\n      clearErrors(\"firstname\");\n    }\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"botton\":\"dailyentry_botton__Bh7MA\",\"monthlyform\":\"dailyentry_monthlyform__74loJ\",\"ctitle\":\"dailyentry_ctitle__arWsJ\",\"title\":\"dailyentry_title__tgDqV\",\"rwtitle\":\"dailyentry_rwtitle__wKIzn\",\"rtitle\":\"dailyentry_rtitle__+0aVf\",\"shRow\":\"dailyentry_shRow__6xKQF\",\"shCol\":\"dailyentry_shCol__EXl-l\",\"tableCon\":\"dailyentry_tableCon__rhqdC\",\"formCon\":\"dailyentry_formCon__AhDr2\",\"btn\":\"dailyentry_btn__aB8j3\",\"buttCon\":\"dailyentry_buttCon__uhCIj\",\"modal\":\"dailyentry_modal__6QNiC\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"productionentry_container__Dihgz\",\"btn\":\"productionentry_btn__gGv10\",\"title\":\"productionentry_title__bjcwh\"};"],"names":["_ref","value","onChange","_jsx","type","placeholder","e","target","StyledTableCell","styled","TableCell","_ref2","theme","_defineProperty","concat","tableCellClasses","head","backgroundColor","color","palette","common","white","border","body","fontSize","StyledTableRow","TableRow","_ref3","action","hover","borderBottom","Table","_ref4","cols","data","rows","className","loadDataonPageChange","counts","includeCheck","checkBoxEvent","styles","_React$useState","React","_React$useState2","_slicedToArray","page","setPage","_React$useState3","_React$useState4","rowsPerPage","setRowsPerPage","_React$useState5","_React$useState6","rowsOptions","dynamicStyles","Math","max","length","alignCenter","IconContext","Provider","children","Row","classes","tableContainer","style","_objectSpread","tablehead","background","Paper","_jsxs","TableContainer","tableStyles","padding","undefined","Col","SearchBox","TablePagination","sx","margin","rowsPerPageOptions","component","count","SelectProps","inputProps","native","onPageChange","event","newPage","onRowsPerPageChange","pagination","table","tableBody","MUITable","stickyHeader","TableHead","align","map","headerItem","index","title","TableBody","slice","item","onClick","checked","col","key","hoverclass","render","defaultProps","bordered","hoverable","striped","isDark","props","Card","search","Header","xs","md","bottonShow","span","offset","Button","variant","onHeaderClick","buttonName","Body","validate","watchValues","errorMethods","errors","setError","clearErrors","message","dispatch","useDispatch","_useState","useState","_useState2","_useState3","random","_useState4","loadState","setLoadState","_useState5","_useState6","defects","setDefects","_useState7","_useState8","process","setProcess","_useSelector","useSelector","state","alertProps","showAlert","alertMessage","alertVariant","_useSelector2","_useFetch","useFetch","get","post","response","_useState9","loading","error","_useState10","oldEntry","setOldEntry","_useState11","stock","produced","_useState12","stockDisplay","setStockDisplay","AlertHandler","alertContent","alertType","alertActions","showAlertHandler","loadInitialData","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","intialdata","loadedProcess","wrap","_context","prev","next","api","orderId","prodProcMapId","selectedItem","sent","id","_toConsumableArray","console","log","ok","retValues","latestEntries","oldStock","prodStock","stockQuantity","_producedQuantity","stop","saveDetails","_callee2","entry","insEntryapi","returnObject","_context2","insEntryId","status","insEntry","_x","apply","arguments","useEffect","_useState13","_useState14","selectedEntry","setSelectedEntry","loadInitialDefects","_callee3","loadeddefects","_context3","form_header","_Fragment","justifyContent","borderRadius","proSubCat","processName","productName","template","fields","name","contains","validation","inpprops","format","validationProps","options","label","min","step","maxlength","CreateForm","watchFields","rowwise","onSubmit","values","onCancel","defaultValues","SimpleCard","QualityTable","showFormHandler","rowData","entryDate","shift","insQuantity","rejectedQuantity","reworkQuantity","remarks","FiEdit","cursor","actions","selectedColumns","order","orderNo","product","customer","quantity","remarksForProd","BsIcons","FaDailymotion","filter","eachElem","indexOf","heading","orderQty","minlength","saveFunction","selected","invoiceDate","invoiceNo","vehicleDetails","dispatches","setDispatches","_useSelector3","modalProps","showModal","selectedForm","selectedData","_useSelector4","loadInitialdata","loadeddata","productId","loadStateTime","Date","toLocaleString","dispatchId","loadStateController","Month","Year","Remarks","Quantity","setSelectedItem","fgStock","DispatchForm","DispatchTable","ProcessTable","producedQuantity","prodEntryapi","entryId","prodEntry","oldArray","ProcessProdTable","heatNo","serielNofrom","serielNoTo","setHeatNo","maxQty","setMaxQty","loadStateid","meltingEntryId","melting_header","furnace","latestHeatNo","CastingTable","MeltTable","MeltingDate","material","materialName","materialWeight","runnerWeight","entries","setEntries","meltEntryId","selctedEntry","loadedOptions","setLoadedOptions","loadInitialOptions","loadedmaterials","intialEntries","meltEntryapi","melt","meltEntry","procMaps","setProcMaps","showForm","cusName","part","cost","showFormParams","setShowformparams","processId","newState","MeltingOutward","hideFormHandler","ProcessForm","QualityForm","Modal","modal","size","centered","show","onHide","simcard","Rmdata","Ignots","RmGrade","Alloy","Runner","Qty","splitUp","tQty","dateprops","numprops","RmForm","AlternateForm","SplitUpForm","closeButton","Title","SearchCard","RmTable","intialPlans","setInitialPlans","plans","toString","orderapi","modalActions","hideModalHandler","searchPlans","date","_x2","showModalHandler","AddPlanForm","handleLoadChange","Dispatch","DailyEntry","RawMaterial","loadStateContoller","MeltingForm","container","planDate","btn","ProdPlanTable"],"sourceRoot":""}