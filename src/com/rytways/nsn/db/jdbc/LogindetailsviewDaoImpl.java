/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.rytways.nsn.db.jdbc;

import com.rytways.nsn.db.dao.*;
import com.rytways.nsn.db.factory.*;
import java.util.Date;
import com.rytways.nsn.db.dto.*;
import com.rytways.nsn.db.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;
import java.sql.CallableStatement;

public class LogindetailsviewDaoImpl extends AbstractDAO implements LogindetailsviewDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT EmpPhoto, LoginId, EmpCode, EmpId, EmpName, CertifiedStatus, StageName, ProductFamilyName, LineId, UpdatedDateTime, Status, Stageid, ProductFamilyId, Shift, IPAddress, LoginDate, LineName, LineStatus, LineOrderNo, ProductFamilyStatus, Gender, FunctionId, AttendanceDate, TuningStationNo, RouteName, FunctionName, LogoutDate, ShiftDate, TuningStatus, TuningAverageTime, NoOfUnitsTuned, Batch, EmpStatus, BatchName, ERTMember, NoOfCerti FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	protected int maxRows;

	/** 
	 * Index of column EmpPhoto
	 */
	protected static final int COLUMN_EMP_PHOTO = 1;

	/** 
	 * Index of column LoginId
	 */
	protected static final int COLUMN_LOGIN_ID = 2;

	/** 
	 * Index of column EmpCode
	 */
	protected static final int COLUMN_EMP_CODE = 3;

	/** 
	 * Index of column EmpId
	 */
	protected static final int COLUMN_EMP_ID = 4;

	/** 
	 * Index of column EmpName
	 */
	protected static final int COLUMN_EMP_NAME = 5;

	/** 
	 * Index of column CertifiedStatus
	 */
	protected static final int COLUMN_CERTIFIED_STATUS = 6;

	/** 
	 * Index of column StageName
	 */
	protected static final int COLUMN_STAGE_NAME = 7;

	/** 
	 * Index of column ProductFamilyName
	 */
	protected static final int COLUMN_PRODUCT_FAMILY_NAME = 8;

	/** 
	 * Index of column LineId
	 */
	protected static final int COLUMN_LINE_ID = 9;

	/** 
	 * Index of column UpdatedDateTime
	 */
	protected static final int COLUMN_UPDATED_DATE_TIME = 10;

	/** 
	 * Index of column Status
	 */
	protected static final int COLUMN_STATUS = 11;

	/** 
	 * Index of column Stageid
	 */
	protected static final int COLUMN_STAGEID = 12;

	/** 
	 * Index of column ProductFamilyId
	 */
	protected static final int COLUMN_PRODUCT_FAMILY_ID = 13;

	/** 
	 * Index of column Shift
	 */
	protected static final int COLUMN_SHIFT = 14;

	/** 
	 * Index of column IPAddress
	 */
	protected static final int COLUMN_IPADDRESS = 15;

	/** 
	 * Index of column LoginDate
	 */
	protected static final int COLUMN_LOGIN_DATE = 16;

	/** 
	 * Index of column LineName
	 */
	protected static final int COLUMN_LINE_NAME = 17;

	/** 
	 * Index of column LineStatus
	 */
	protected static final int COLUMN_LINE_STATUS = 18;

	/** 
	 * Index of column LineOrderNo
	 */
	protected static final int COLUMN_LINE_ORDER_NO = 19;

	/** 
	 * Index of column ProductFamilyStatus
	 */
	protected static final int COLUMN_PRODUCT_FAMILY_STATUS = 20;

	/** 
	 * Index of column Gender
	 */
	protected static final int COLUMN_GENDER = 21;

	/** 
	 * Index of column FunctionId
	 */
	protected static final int COLUMN_FUNCTION_ID = 22;

	/** 
	 * Index of column AttendanceDate
	 */
	protected static final int COLUMN_ATTENDANCE_DATE = 23;

	/** 
	 * Index of column TuningStationNo
	 */
	protected static final int COLUMN_TUNING_STATION_NO = 24;

	/** 
	 * Index of column RouteName
	 */
	protected static final int COLUMN_ROUTE_NAME = 25;

	/** 
	 * Index of column FunctionName
	 */
	protected static final int COLUMN_FUNCTION_NAME = 26;

	/** 
	 * Index of column LogoutDate
	 */
	protected static final int COLUMN_LOGOUT_DATE = 27;

	/** 
	 * Index of column ShiftDate
	 */
	protected static final int COLUMN_SHIFT_DATE = 28;

	/** 
	 * Index of column TuningStatus
	 */
	protected static final int COLUMN_TUNING_STATUS = 29;

	/** 
	 * Index of column TuningAverageTime
	 */
	protected static final int COLUMN_TUNING_AVERAGE_TIME = 30;

	/** 
	 * Index of column NoOfUnitsTuned
	 */
	protected static final int COLUMN_NO_OF_UNITS_TUNED = 31;

	/** 
	 * Index of column Batch
	 */
	protected static final int COLUMN_BATCH = 32;

	/** 
	 * Index of column EmpStatus
	 */
	protected static final int COLUMN_EMP_STATUS = 33;

	/** 
	 * Index of column BatchName
	 */
	protected static final int COLUMN_BATCH_NAME = 34;

	/** 
	 * Index of column ERTMember
	 */
	protected static final int COLUMN_ERTMEMBER = 35;

	/** 
	 * Index of column NoOfCerti
	 */
	protected static final int COLUMN_NO_OF_CERTI = 36;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 36;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria ''.
	 */
	public Logindetailsview[] findAll() throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT, null );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'EmpPhoto = :empPhoto'.
	 */
	public Logindetailsview[] findWhereEmpPhotoEquals(String empPhoto) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EmpPhoto = ? ORDER BY EmpPhoto", new Object[] { empPhoto } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'LoginId = :loginId'.
	 */
	public Logindetailsview[] findWhereLoginIdEquals(int loginId) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LoginId = ? ORDER BY LoginId", new Object[] {  new Integer(loginId) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'EmpCode = :empCode'.
	 */
	public Logindetailsview[] findWhereEmpCodeEquals(int empCode) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EmpCode = ? ORDER BY EmpCode", new Object[] {  new Integer(empCode) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'EmpId = :empId'.
	 */
	public Logindetailsview[] findWhereEmpIdEquals(int empId) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EmpId = ? ORDER BY EmpId", new Object[] {  new Integer(empId) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'EmpName = :empName'.
	 */
	public Logindetailsview[] findWhereEmpNameEquals(String empName) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EmpName = ? ORDER BY EmpName", new Object[] { empName } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'CertifiedStatus = :certifiedStatus'.
	 */
	public Logindetailsview[] findWhereCertifiedStatusEquals(int certifiedStatus) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CertifiedStatus = ? ORDER BY CertifiedStatus", new Object[] {  new Integer(certifiedStatus) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'StageName = :stageName'.
	 */
	public Logindetailsview[] findWhereStageNameEquals(String stageName) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE StageName = ? ORDER BY StageName", new Object[] { stageName } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'ProductFamilyName = :productFamilyName'.
	 */
	public Logindetailsview[] findWhereProductFamilyNameEquals(String productFamilyName) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ProductFamilyName = ? ORDER BY ProductFamilyName", new Object[] { productFamilyName } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'LineId = :lineId'.
	 */
	public Logindetailsview[] findWhereLineIdEquals(int lineId) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LineId = ? ORDER BY LineId", new Object[] {  new Integer(lineId) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'UpdatedDateTime = :updatedDateTime'.
	 */
	public Logindetailsview[] findWhereUpdatedDateTimeEquals(Date updatedDateTime) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE UpdatedDateTime = ? ORDER BY UpdatedDateTime", new Object[] { updatedDateTime==null ? null : new java.sql.Timestamp( updatedDateTime.getTime() ) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'Status = :status'.
	 */
	public Logindetailsview[] findWhereStatusEquals(int status) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Status = ? ORDER BY Status", new Object[] {  new Integer(status) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'Stageid = :stageid'.
	 */
	public Logindetailsview[] findWhereStageidEquals(int stageid) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Stageid = ? ORDER BY Stageid", new Object[] {  new Integer(stageid) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'ProductFamilyId = :productFamilyId'.
	 */
	public Logindetailsview[] findWhereProductFamilyIdEquals(int productFamilyId) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ProductFamilyId = ? ORDER BY ProductFamilyId", new Object[] {  new Integer(productFamilyId) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'Shift = :shift'.
	 */
	public Logindetailsview[] findWhereShiftEquals(int shift) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Shift = ? ORDER BY Shift", new Object[] {  new Integer(shift) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'IPAddress = :ipaddress'.
	 */
	public Logindetailsview[] findWhereIpaddressEquals(String ipaddress) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IPAddress = ? ORDER BY IPAddress", new Object[] { ipaddress } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'LoginDate = :loginDate'.
	 */
	public Logindetailsview[] findWhereLoginDateEquals(Date loginDate) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LoginDate = ? ORDER BY LoginDate", new Object[] { loginDate==null ? null : new java.sql.Timestamp( loginDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'LineName = :lineName'.
	 */
	public Logindetailsview[] findWhereLineNameEquals(String lineName) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LineName = ? ORDER BY LineName", new Object[] { lineName } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'LineStatus = :lineStatus'.
	 */
	public Logindetailsview[] findWhereLineStatusEquals(int lineStatus) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LineStatus = ? ORDER BY LineStatus", new Object[] {  new Integer(lineStatus) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'LineOrderNo = :lineOrderNo'.
	 */
	public Logindetailsview[] findWhereLineOrderNoEquals(int lineOrderNo) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LineOrderNo = ? ORDER BY LineOrderNo", new Object[] {  new Integer(lineOrderNo) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'ProductFamilyStatus = :productFamilyStatus'.
	 */
	public Logindetailsview[] findWhereProductFamilyStatusEquals(int productFamilyStatus) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ProductFamilyStatus = ? ORDER BY ProductFamilyStatus", new Object[] {  new Integer(productFamilyStatus) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'Gender = :gender'.
	 */
	public Logindetailsview[] findWhereGenderEquals(String gender) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Gender = ? ORDER BY Gender", new Object[] { gender } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'FunctionId = :functionId'.
	 */
	public Logindetailsview[] findWhereFunctionIdEquals(int functionId) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FunctionId = ? ORDER BY FunctionId", new Object[] {  new Integer(functionId) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'AttendanceDate = :attendanceDate'.
	 */
	public Logindetailsview[] findWhereAttendanceDateEquals(String attendanceDate) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE AttendanceDate = ? ORDER BY AttendanceDate", new Object[] { attendanceDate } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'TuningStationNo = :tuningStationNo'.
	 */
	public Logindetailsview[] findWhereTuningStationNoEquals(String tuningStationNo) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TuningStationNo = ? ORDER BY TuningStationNo", new Object[] { tuningStationNo } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'RouteName = :routeName'.
	 */
	public Logindetailsview[] findWhereRouteNameEquals(String routeName) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE RouteName = ? ORDER BY RouteName", new Object[] { routeName } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'FunctionName = :functionName'.
	 */
	public Logindetailsview[] findWhereFunctionNameEquals(String functionName) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE FunctionName = ? ORDER BY FunctionName", new Object[] { functionName } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'LogoutDate = :logoutDate'.
	 */
	public Logindetailsview[] findWhereLogoutDateEquals(Date logoutDate) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LogoutDate = ? ORDER BY LogoutDate", new Object[] { logoutDate==null ? null : new java.sql.Timestamp( logoutDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'ShiftDate = :shiftDate'.
	 */
	public Logindetailsview[] findWhereShiftDateEquals(Date shiftDate) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ShiftDate = ? ORDER BY ShiftDate", new Object[] { shiftDate==null ? null : new java.sql.Timestamp( shiftDate.getTime() ) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'TuningStatus = :tuningStatus'.
	 */
	public Logindetailsview[] findWhereTuningStatusEquals(int tuningStatus) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TuningStatus = ? ORDER BY TuningStatus", new Object[] {  new Integer(tuningStatus) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'TuningAverageTime = :tuningAverageTime'.
	 */
	public Logindetailsview[] findWhereTuningAverageTimeEquals(double tuningAverageTime) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TuningAverageTime = ? ORDER BY TuningAverageTime", new Object[] {  new Double(tuningAverageTime) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'NoOfUnitsTuned = :noOfUnitsTuned'.
	 */
	public Logindetailsview[] findWhereNoOfUnitsTunedEquals(int noOfUnitsTuned) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NoOfUnitsTuned = ? ORDER BY NoOfUnitsTuned", new Object[] {  new Integer(noOfUnitsTuned) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'Batch = :batch'.
	 */
	public Logindetailsview[] findWhereBatchEquals(int batch) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE Batch = ? ORDER BY Batch", new Object[] {  new Integer(batch) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'EmpStatus = :empStatus'.
	 */
	public Logindetailsview[] findWhereEmpStatusEquals(int empStatus) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE EmpStatus = ? ORDER BY EmpStatus", new Object[] {  new Integer(empStatus) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'BatchName = :batchName'.
	 */
	public Logindetailsview[] findWhereBatchNameEquals(String batchName) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE BatchName = ? ORDER BY BatchName", new Object[] { batchName } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'ERTMember = :ertmember'.
	 */
	public Logindetailsview[] findWhereErtmemberEquals(int ertmember) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ERTMember = ? ORDER BY ERTMember", new Object[] {  new Integer(ertmember) } );
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'NoOfCerti = :noOfCerti'.
	 */
	public Logindetailsview[] findWhereNoOfCertiEquals(int noOfCerti) throws LogindetailsviewDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NoOfCerti = ? ORDER BY NoOfCerti", new Object[] {  new Integer(noOfCerti) } );
	}

	/**
	 * Method 'LogindetailsviewDaoImpl'
	 * 
	 */
	public LogindetailsviewDaoImpl()
	{
	}

	/**
	 * Method 'LogindetailsviewDaoImpl'
	 * 
	 * @param userConn
	 */
	public LogindetailsviewDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "logindetailsview";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Logindetailsview fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Logindetailsview dto = new Logindetailsview();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Logindetailsview[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Logindetailsview dto = new Logindetailsview();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Logindetailsview ret[] = new Logindetailsview[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Logindetailsview dto, ResultSet rs) throws SQLException
	{
		dto.setEmpPhoto( rs.getString( COLUMN_EMP_PHOTO ) );
		dto.setLoginId( rs.getInt( COLUMN_LOGIN_ID ) );
		dto.setEmpCode( rs.getInt( COLUMN_EMP_CODE ) );
		if (rs.wasNull()) {
			dto.setEmpCodeNull( true );
		}
		
		dto.setEmpId( rs.getInt( COLUMN_EMP_ID ) );
		if (rs.wasNull()) {
			dto.setEmpIdNull( true );
		}
		
		dto.setEmpName( rs.getString( COLUMN_EMP_NAME ) );
		dto.setCertifiedStatus( rs.getInt( COLUMN_CERTIFIED_STATUS ) );
		if (rs.wasNull()) {
			dto.setCertifiedStatusNull( true );
		}
		
		dto.setStageName( rs.getString( COLUMN_STAGE_NAME ) );
		dto.setProductFamilyName( rs.getString( COLUMN_PRODUCT_FAMILY_NAME ) );
		dto.setLineId( rs.getInt( COLUMN_LINE_ID ) );
		if (rs.wasNull()) {
			dto.setLineIdNull( true );
		}
		
		dto.setUpdatedDateTime( rs.getTimestamp(COLUMN_UPDATED_DATE_TIME ) );
		dto.setStatus( rs.getInt( COLUMN_STATUS ) );
		if (rs.wasNull()) {
			dto.setStatusNull( true );
		}
		
		dto.setStageid( rs.getInt( COLUMN_STAGEID ) );
		if (rs.wasNull()) {
			dto.setStageidNull( true );
		}
		
		dto.setProductFamilyId( rs.getInt( COLUMN_PRODUCT_FAMILY_ID ) );
		if (rs.wasNull()) {
			dto.setProductFamilyIdNull( true );
		}
		
		dto.setShift( rs.getInt( COLUMN_SHIFT ) );
		if (rs.wasNull()) {
			dto.setShiftNull( true );
		}
		
		dto.setIpaddress( rs.getString( COLUMN_IPADDRESS ) );
		dto.setLoginDate( rs.getTimestamp(COLUMN_LOGIN_DATE ) );
		dto.setLineName( rs.getString( COLUMN_LINE_NAME ) );
		dto.setLineStatus( rs.getInt( COLUMN_LINE_STATUS ) );
		if (rs.wasNull()) {
			dto.setLineStatusNull( true );
		}
		
		dto.setLineOrderNo( rs.getInt( COLUMN_LINE_ORDER_NO ) );
		if (rs.wasNull()) {
			dto.setLineOrderNoNull( true );
		}
		
		dto.setProductFamilyStatus( rs.getInt( COLUMN_PRODUCT_FAMILY_STATUS ) );
		if (rs.wasNull()) {
			dto.setProductFamilyStatusNull( true );
		}
		
		dto.setGender( rs.getString( COLUMN_GENDER ) );
		dto.setFunctionId( rs.getInt( COLUMN_FUNCTION_ID ) );
		if (rs.wasNull()) {
			dto.setFunctionIdNull( true );
		}
		
		dto.setAttendanceDate( rs.getString( COLUMN_ATTENDANCE_DATE ) );
		dto.setTuningStationNo( rs.getString( COLUMN_TUNING_STATION_NO ) );
		dto.setRouteName( rs.getString( COLUMN_ROUTE_NAME ) );
		dto.setFunctionName( rs.getString( COLUMN_FUNCTION_NAME ) );
		dto.setLogoutDate( rs.getTimestamp(COLUMN_LOGOUT_DATE ) );
		dto.setShiftDate( rs.getTimestamp(COLUMN_SHIFT_DATE ) );
		dto.setTuningStatus( rs.getInt( COLUMN_TUNING_STATUS ) );
		if (rs.wasNull()) {
			dto.setTuningStatusNull( true );
		}
		
		dto.setTuningAverageTime( rs.getDouble( COLUMN_TUNING_AVERAGE_TIME ) );
		if (rs.wasNull()) {
			dto.setTuningAverageTimeNull( true );
		}
		
		dto.setNoOfUnitsTuned( rs.getInt( COLUMN_NO_OF_UNITS_TUNED ) );
		if (rs.wasNull()) {
			dto.setNoOfUnitsTunedNull( true );
		}
		
		dto.setBatch( rs.getInt( COLUMN_BATCH ) );
		if (rs.wasNull()) {
			dto.setBatchNull( true );
		}
		
		dto.setEmpStatus( rs.getInt( COLUMN_EMP_STATUS ) );
		if (rs.wasNull()) {
			dto.setEmpStatusNull( true );
		}
		
		dto.setBatchName( rs.getString( COLUMN_BATCH_NAME ) );
		dto.setErtmember( rs.getInt( COLUMN_ERTMEMBER ) );
		if (rs.wasNull()) {
			dto.setErtmemberNull( true );
		}
		
		dto.setNoOfCerti( rs.getInt( COLUMN_NO_OF_CERTI ) );
		if (rs.wasNull()) {
			dto.setNoOfCertiNull( true );
		}
		
	}

	/** 
	 * Resets the modified attributes in the DTO
	 */
	protected void reset(Logindetailsview dto)
	{
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the specified arbitrary SQL statement
	 */
	public Logindetailsview[] findByDynamicSelect(String sql, Object[] sqlParams) throws LogindetailsviewDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LogindetailsviewDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the logindetailsview table that match the specified arbitrary SQL statement
	 */
	public Logindetailsview[] findByDynamicWhere(String sql, Object[] sqlParams) throws LogindetailsviewDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			System.out.println( "Executing " + SQL );
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			_e.printStackTrace();
			throw new LogindetailsviewDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
