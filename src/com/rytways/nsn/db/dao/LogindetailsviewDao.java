/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.rytways.nsn.db.dao;

import java.util.Date;
import com.rytways.nsn.db.dto.*;
import com.rytways.nsn.db.exceptions.*;
import java.sql.CallableStatement;

public interface LogindetailsviewDao
{
	/** 
	 * Returns all rows from the logindetailsview table that match the criteria ''.
	 */
	public Logindetailsview[] findAll() throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'EmpPhoto = :empPhoto'.
	 */
	public Logindetailsview[] findWhereEmpPhotoEquals(String empPhoto) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'LoginId = :loginId'.
	 */
	public Logindetailsview[] findWhereLoginIdEquals(int loginId) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'EmpCode = :empCode'.
	 */
	public Logindetailsview[] findWhereEmpCodeEquals(int empCode) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'EmpId = :empId'.
	 */
	public Logindetailsview[] findWhereEmpIdEquals(int empId) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'EmpName = :empName'.
	 */
	public Logindetailsview[] findWhereEmpNameEquals(String empName) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'CertifiedStatus = :certifiedStatus'.
	 */
	public Logindetailsview[] findWhereCertifiedStatusEquals(int certifiedStatus) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'StageName = :stageName'.
	 */
	public Logindetailsview[] findWhereStageNameEquals(String stageName) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'ProductFamilyName = :productFamilyName'.
	 */
	public Logindetailsview[] findWhereProductFamilyNameEquals(String productFamilyName) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'LineId = :lineId'.
	 */
	public Logindetailsview[] findWhereLineIdEquals(int lineId) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'UpdatedDateTime = :updatedDateTime'.
	 */
	public Logindetailsview[] findWhereUpdatedDateTimeEquals(Date updatedDateTime) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'Status = :status'.
	 */
	public Logindetailsview[] findWhereStatusEquals(int status) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'Stageid = :stageid'.
	 */
	public Logindetailsview[] findWhereStageidEquals(int stageid) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'ProductFamilyId = :productFamilyId'.
	 */
	public Logindetailsview[] findWhereProductFamilyIdEquals(int productFamilyId) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'Shift = :shift'.
	 */
	public Logindetailsview[] findWhereShiftEquals(int shift) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'IPAddress = :ipaddress'.
	 */
	public Logindetailsview[] findWhereIpaddressEquals(String ipaddress) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'LoginDate = :loginDate'.
	 */
	public Logindetailsview[] findWhereLoginDateEquals(Date loginDate) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'LineName = :lineName'.
	 */
	public Logindetailsview[] findWhereLineNameEquals(String lineName) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'LineStatus = :lineStatus'.
	 */
	public Logindetailsview[] findWhereLineStatusEquals(int lineStatus) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'LineOrderNo = :lineOrderNo'.
	 */
	public Logindetailsview[] findWhereLineOrderNoEquals(int lineOrderNo) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'ProductFamilyStatus = :productFamilyStatus'.
	 */
	public Logindetailsview[] findWhereProductFamilyStatusEquals(int productFamilyStatus) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'Gender = :gender'.
	 */
	public Logindetailsview[] findWhereGenderEquals(String gender) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'FunctionId = :functionId'.
	 */
	public Logindetailsview[] findWhereFunctionIdEquals(int functionId) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'AttendanceDate = :attendanceDate'.
	 */
	public Logindetailsview[] findWhereAttendanceDateEquals(String attendanceDate) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'TuningStationNo = :tuningStationNo'.
	 */
	public Logindetailsview[] findWhereTuningStationNoEquals(String tuningStationNo) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'RouteName = :routeName'.
	 */
	public Logindetailsview[] findWhereRouteNameEquals(String routeName) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'FunctionName = :functionName'.
	 */
	public Logindetailsview[] findWhereFunctionNameEquals(String functionName) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'LogoutDate = :logoutDate'.
	 */
	public Logindetailsview[] findWhereLogoutDateEquals(Date logoutDate) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'ShiftDate = :shiftDate'.
	 */
	public Logindetailsview[] findWhereShiftDateEquals(Date shiftDate) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'TuningStatus = :tuningStatus'.
	 */
	public Logindetailsview[] findWhereTuningStatusEquals(int tuningStatus) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'TuningAverageTime = :tuningAverageTime'.
	 */
	public Logindetailsview[] findWhereTuningAverageTimeEquals(double tuningAverageTime) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'NoOfUnitsTuned = :noOfUnitsTuned'.
	 */
	public Logindetailsview[] findWhereNoOfUnitsTunedEquals(int noOfUnitsTuned) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'Batch = :batch'.
	 */
	public Logindetailsview[] findWhereBatchEquals(int batch) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'EmpStatus = :empStatus'.
	 */
	public Logindetailsview[] findWhereEmpStatusEquals(int empStatus) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'BatchName = :batchName'.
	 */
	public Logindetailsview[] findWhereBatchNameEquals(String batchName) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'ERTMember = :ertmember'.
	 */
	public Logindetailsview[] findWhereErtmemberEquals(int ertmember) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the criteria 'NoOfCerti = :noOfCerti'.
	 */
	public Logindetailsview[] findWhereNoOfCertiEquals(int noOfCerti) throws LogindetailsviewDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the logindetailsview table that match the specified arbitrary SQL statement
	 */
	public Logindetailsview[] findByDynamicSelect(String sql, Object[] sqlParams) throws LogindetailsviewDaoException;

	/** 
	 * Returns all rows from the logindetailsview table that match the specified arbitrary SQL statement
	 */
	public Logindetailsview[] findByDynamicWhere(String sql, Object[] sqlParams) throws LogindetailsviewDaoException;

}
